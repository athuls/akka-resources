module examples.chat;
import java.time.Duration;
import java.time.Instant;
import java.util.Date;
import java.sql.Timestamp;
//Three speakers chat in a chat session initialized by the actor Chat


behavior UnorderedChat{

	void chatSession(Speaker s1, Speaker s2, Speaker s3) {
		s1<-broadcastSend("Sample message form speaker 1");
		s2<-broadcastSend("Sample message from speaker 2");
		//currentContinuation;
	}

	void reply(String replyMsg) {
		standardOutput<-println(replyMsg);
	
	}
	
	void act(String args[]) {

		if(args.length != 3 ){
			standardOutput<-println("Usage: java -Duan=myuan examples.chat.Chat <friendUAN1> <friendUAN2>");
			return;
		}
		
		try {
		  Speaker speaker1 =(Speaker) Speaker.getReferenceByName(args[0]) ;
		  Speaker speaker2 =(Speaker) Speaker.getReferenceByName(args[1]) ;
		  Speaker speaker3 =(Speaker) Speaker.getReferenceByName(args[2]) ;
		  Date first = new Date();
          Timestamp start = new Timestamp(first.getTime());
          standardOutput<-println("Starting time: " + start);
          Instant begin = Instant.now();
		  chatSession(speaker1, speaker2, speaker3) @ trackEndingTime(begin) @ standardOutput<-println("Done with chat conversation");
		} catch (Exception e) {
		  standardOutput<-println("Usage: java examples.chat.Chat <friendUAN1> <friendUAN2> <friendUAN3>");
		  return;
		}
	}

	void trackEndingTime(Instant begin)
        {
              // keep track of ending time here
              Date second = new Date();
              Timestamp end = new Timestamp(second.getTime());

              // calculate time elapsed
              Instant endTime = Instant.now();
              Duration timeDifference = Duration.between(begin, endTime);
              long timeTaken = timeDifference.toMillis();
              standardOutput <- println("Time taken to run this in milliseconds: " + timeTaken);
              standardOutput<-println("Ending time: " + end);
    	}
}

