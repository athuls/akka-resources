module todo;
//Server backend for the chat application

import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;

// remove set of task lists here
behavior Server implements ActorService{
	
	List registeredUsers;
	List specifiedTasks;
	Task taskRef;
    TaskList mainList;


	Server() {
		registeredUsers = new ArrayList();
		specifiedTasks = new ArrayList();
	}

	 void broadcast(String taskId,String msg, String creatorName){
	   User mainUser = (User) User.getReferenceByName((String)creatorName);
	   for(int i = 0; i < registeredUsers.size(); i++) {
        User userRef = (User) User.getReferenceByName(((User)registeredUsers.get(i)).getUAN());
		String userRefName = (String)registeredUsers.get(i);
		if(!userRefName.equals(creatorName))
		{
			userRef<-broadcastReceive(taskId, msg);
		}
	 }
	 }

	boolean registerUser(String userId, String email, String status) {
		// Check any condition for registration if required
		standardOutput<-println("Registering User " + userId);
		registeredUsers.add(userId);
		return true;
		
	}
	
    boolean addTaskToList(TaskList taskList,String taskId,String text,String creator){
		if (creator == null) {
            standardOutput<-println("creator is null");
			return false;
        }
        standardOutput<-println(" calling inside server.addTaskToList");
        standardOutput<-println(taskId);
		User mainUser = (User) User.getReferenceByName(creator);
        Task task = new Task(text, taskId, creator);
        if (task == null) {
            standardOutput<-println("Task is null");
			return false;
        }
        
        TaskList taskListRef = (TaskList) TaskList.getReferenceByName(taskList.getUAN());
        taskListRef<-addTask(creator, task, taskId);
        standardOutput<-println("after taskListRef");
        mainList=taskList;
		broadcast(taskId, text, creator);
        return true;
    }

    boolean updateTask(String taskId,String text,String creator){

            standardOutput<-println("before taskListRef.update");
            TaskList taskListRef = (TaskList) TaskList.getReferenceByName((mainList).getUAN());
            taskListRef<-updateTask(taskId, text, creator);
            standardOutput<-println("after taskListRef.update");
			broadcast(taskId, text, creator);
            return true;
        }

	void act(String args[]) {
		if(args.length != 0 ){
		    standardOutput<-println(args.length);
			standardOutput<-println("Usage: java -Duan=myuan todo.Server");
			return;
		}
		
		standardOutput<-println("Server started");
	}
}
