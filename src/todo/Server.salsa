module todo;
//Server backend for the chat application

import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import java.util.Map;
import java.util.HashMap;

// remove set of task lists here
behavior Server implements ActorService
{	
	List registeredUsers;
	List specifiedTasks;
	Task taskRef;
    TaskList mainList;
    Map userIdUANMap;

	Server()
	{
		registeredUsers = new ArrayList();
		specifiedTasks = new ArrayList();
		userIdUANMap = new HashMap();
	}

    // broadcast( todo.Task java.lang.String java.lang.String java.lang.String int int boolean )
	void broadcast(Task task, String taskName,String text,String creator, int number_of_updates, int total_initials, boolean isUpdate, boolean isFollowup)
	{
		for(int i = 0; i < registeredUsers.size(); i++) 
		{
			String userRefName = (String)registeredUsers.get(i);
			if(!userRefName.equals(creator))
			{
				User user = (User) userIdUANMap.get(userRefName);
				if(user != null)
				{
               		User userRef = (User) User.getReferenceByName( user.getUAN());
                	userRef<-broadcastReceiveAdvanced(task, taskName, text, isUpdate, total_initials, number_of_updates,isFollowup);
            	}
			}
	 	}
	}

	boolean registerUser(String userId, String email, String status,User user)
	{
		// Check any condition for registration if required
		standardOutput<-println("Registering User " + userId +"user" + user);
		registeredUsers.add(userId);
		userIdUANMap.put(userId,user);
		return true;
	}

    boolean addTaskToList(TaskList taskList, Task task,String taskName,String text, String creator, int number_of_updates, int total_initials, boolean isFollowup)
	{        
        TaskList taskListRef = (TaskList) TaskList.getReferenceByName(taskList.getUAN());
		mainList = taskList;
        taskListRef<-addTask(creator, task, taskName, text) @
		broadcast(task,taskName,text, creator, number_of_updates, total_initials, false, isFollowup);
        return true;
    }

    boolean updateTask(Task task,String name,String text, String creator, int number_of_updates, int total_initials)
	{
        standardOutput<-println("before taskListRef.update");
        TaskList taskListRef = (TaskList) TaskList.getReferenceByName((mainList).getUAN());
        taskListRef<-updateTask(name, text, creator) @
        standardOutput<-println("after taskListRef.update") @
        // Task task, String taskName,String text,String creator, int number_of_updates, int total_initials, boolean isUpdate
	    broadcast(task, name,text,creator, number_of_updates, total_initials, true, false);
        return true;
	}

	void act(String args[])
	{
		if(args.length != 0 )
		{
		    standardOutput<-println(args.length);
			standardOutput<-println("Usage: java -Duan=myuan todo.Server");
			return;
		}		
		standardOutput<-println("Server started");
	}
}
