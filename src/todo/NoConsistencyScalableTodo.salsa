module todo;
import java.time.Duration;
import java.time.Instant;
import java.util.Date;
import java.sql.Timestamp;
import java.util.*;
import java.io.PrintWriter;
import java.io.File;
import java.io.PrintWriter;
import java.io.File;

//Three users chat in a chat session initialized by the actor Chat

behavior NoConsistencyScalableTodo implements ActorService
{
	void todoSession(ArrayList users,ArrayList userNames, int num_users,int num_messages, String server_ref,String logDirectory,TaskList taskList)
	{
		Server server = (Server) Server.getReferenceByName(server_ref);
		ArrayList values = new ArrayList();

		for(int i = 1; i <= num_messages; i++)
			values.add(i);
		Collections.shuffle(values);

        for(int i = 0; i < users.size(); i++) {
            User registeredUser = (User) users.get(i);
            for(int j = 1; j <= num_messages; j++){
                int index = ((i) > (num_messages - 1) ? (num_messages - 1): (i ));
                String taskname="u"+i+"t"+j;
                registeredUser<-addTaskToList(taskList,"User" + i + ": Random task " + values.get(j-1) + ".",
                           (String) userNames.get(i),taskname,false,0,(num_users - 1) * num_messages,false);
                }
                Collections.shuffle(values);
        }
	}

	void reply(String replyMsg) 
	{
		standardOutput<-println(replyMsg);
	}
	
	void act(String args[])
	{

		try
		{

		    String serverRef = args[0];
		    String logDirectory=args[1];
		    int num_users = Integer.parseInt(args[2]);
		    int num_messages = Integer.parseInt(args[3]);
		    TaskList taskList =(TaskList) TaskList.getReferenceByName(args[4]);
		    String userPaddedString = args[5];
		    String nameServerHost = args[6];

		    Server server = (Server) Server.getReferenceByName(serverRef);
		    ArrayList users = new ArrayList();
		    ArrayList userNames = new ArrayList();

			Date first = new Date();
			Timestamp start = new Timestamp(first.getTime());
			String fileSeparator = System.getProperty("file.separator");
			// first create the users and register them.
			for(int i = 1; i <= num_users; i++)
            {
                    int usrId = 10 +i;
                    String id = "uan://"+nameServerHost+":3030/id"+usrId;
                    String userName = "user"+i;
                    userNames.add(userName);
                    User user = (User) User.getReferenceByName(id);
                    users.add(user);
            }
			standardOutput <- println("Starting time: " + start);
			Instant begin = Instant.now();
			todoSession(users,userNames,num_users, num_messages,serverRef,logDirectory,taskList) @ trackEndingTime(begin) @ standardOutput<-println("Done with chat conversation");
		}
		catch (Exception e)
		{
			standardOutput <- println("Usage: java examples.chat.Chat <friendUAN1> <friendUAN2> <friendUAN3>");
			return;
		}
	}

	void trackEndingTime(Instant begin)
	{
		// keep track of ending time here
		Date second = new Date();
		Timestamp end = new Timestamp(second.getTime());

		// calculate time elapsed
		Instant endTime = Instant.now();
		Duration timeDifference = Duration.between(begin, endTime);
	    long timeTaken = timeDifference.toMillis();
		standardOutput <- println("Time taken to run this in milliseconds: " + timeTaken);
		standardOutput<-println("Ending time: " + end);
	}
}
