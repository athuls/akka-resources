module todo;

import java.util.Set;
import java.util.HashSet;

behavior User implements ActorService{
	private String myName="";
	private String emailId="";
	private String status="";
	Server server_ref;
	private Set taskIds=new HashSet();
	
	User(String id, String email, String status)
	{
		myName = id;
		emailId = email;
		status = status;
	}

	// handle update case as well
	// make a distinction between tasks the user owns vs the tasks the user is viewing
	void broadcastReceive(String taskId, String msg) {
		standardOutput<-println("[Task Id] " + taskId + ": " + msg);
		if (!taskIds.contains(taskId)){
		    taskIds.add(taskId);
		    }
		else
		{
			// update case
			taskIds.remove(taskId);
			taskIds.add(taskId);
		}
	}

	// add a function here for viewing task list
	void viewTaskList()
	{
		
	}
	
	String getUserName() {
		return myName;
	}

	boolean createTaskList(String name){
	    standardOutput<-println(" calling inside user.createTaskList");
        server_ref<-createTaskList(name,self);
        return true;
	}

    void whereAmI() {
		standardOutput<-println("User started with uan: "+ getUAN().toString());
	}
	boolean addTaskToList(TaskList taskList,String taskId,String text){
		// first view tasklist here
		
	    server_ref<-addTaskToList(taskList, taskId, text,self);
	    return true;
	}

	boolean updateTask(String taskId,String text){
		server_ref<-updateTask( taskId, text,self);
		return true;
	    }


	void act(String args[]){
		if(args.length != 2){
			standardOutput<-println("Usage: java -Duan=uan://hostname/place todo.User <serverName> <myName>");
			return;
		}
		
		myName=args[1];
		whereAmI();

		server_ref = (Server) Server.getReferenceByName(args[0]);
		//server_ref<-registerUser(myName);
	}	
}
