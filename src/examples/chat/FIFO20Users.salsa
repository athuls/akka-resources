module examples.chat;
import java.time.Duration;
import java.time.Instant;
import java.util.Date;
import java.sql.Timestamp;
import java.util.*;

//Three speakers chat in a chat session initialized by the actor Chat

behavior FIFO20Users
{
	void chatSession(Speaker s1, Speaker s2, Speaker s3, Speaker s4, Speaker s5, Speaker s6, Speaker s7, Speaker s8, Speaker s9, Speaker s10,
	Speaker s11, Speaker s12, Speaker s13, Speaker s14, Speaker s15, Speaker s16, Speaker s17, Speaker s18, Speaker s19, Speaker s20,
	int num_messages) 
	{
		ArrayList values = new ArrayList();
		for(int i = 1; i <= num_messages; i++)
			values.add(i);
		Collections.shuffle(values);
		for(int i = 1; i <= num_messages; i++)
			s1<-broadcastSend("User 1: Ordered message " + values.get(i - 1) + ".", true, false, false, 0, 19 * num_messages, true);
		Collections.shuffle(values);
		for(int i = 1; i <= num_messages; i++)
			s2<-broadcastSend("User 2: Ordered message " + values.get(i - 1) + ".", true, false, false, 0, 19 * num_messages, true);
		Collections.shuffle(values);
		for(int i = 1; i <= num_messages; i++)
			s3<-broadcastSend("User 3: Ordered message " + values.get(i - 1) + ".", true, false, false, 0, 19 * num_messages, true);
		Collections.shuffle(values);
		for(int i = 1; i <= num_messages; i++)
			s4<-broadcastSend("User 4: Ordered message " + values.get(i - 1) + ".", true, false, false, 0, 19 * num_messages, true);
		Collections.shuffle(values);
		for(int i = 1; i <= num_messages; i++)
			s5<-broadcastSend("User 5: Ordered message " + values.get(i - 1) + ".", true, false, false, 0, 19 * num_messages, true);
		Collections.shuffle(values);
		for(int i = 1; i <= num_messages; i++)
			s6<-broadcastSend("User 6: Ordered message " + values.get(i - 1) + ".", true, false, false, 0, 19 * num_messages, true);
		Collections.shuffle(values);
		for(int i = 1; i <= num_messages; i++)
			s7<-broadcastSend("User 7: Ordered message " + values.get(i - 1) + ".", true, false, false, 0, 19 * num_messages, true);
		Collections.shuffle(values);
		for(int i = 1; i <= num_messages; i++)
			s8<-broadcastSend("User 8: Ordered message " + values.get(i - 1) + ".", true, false, false, 0, 19 * num_messages, true);
		Collections.shuffle(values);
		for(int i = 1; i <= num_messages; i++)
			s9<-broadcastSend("User 9: Ordered message " + values.get(i - 1) + ".", true, false, false, 0, 19 * num_messages, true);
		Collections.shuffle(values);
		for(int i = 1; i <= num_messages; i++)
			s10<-broadcastSend("User 10: Ordered message " + values.get(i - 1) + ".", true, false, false, 0, 19 * num_messages, true);
		Collections.shuffle(values);
		for(int i = 1; i <= num_messages; i++)
			s11<-broadcastSend("User 11: Ordered message " + values.get(i - 1) + ".", true, false, false, 0, 19 * num_messages, true);
		Collections.shuffle(values);
		for(int i = 1; i <= num_messages; i++)
			s12<-broadcastSend("User 12: Ordered message " + values.get(i - 1) + ".", true, false, false, 0, 19 * num_messages, true);
		Collections.shuffle(values);
		for(int i = 1; i <= num_messages; i++)
			s13<-broadcastSend("User 13: Ordered message " + values.get(i - 1) + ".", true, false, false, 0, 19 * num_messages, true);
		Collections.shuffle(values);
		for(int i = 1; i <= num_messages; i++)
			s14<-broadcastSend("User 14: Ordered message " + values.get(i - 1) + ".", true, false, false, 0, 19 * num_messages, true);
		Collections.shuffle(values);
		for(int i = 1; i <= num_messages; i++)
			s15<-broadcastSend("User 15: Ordered message " + values.get(i - 1) + ".", true, false, false, 0, 19 * num_messages, true);
		Collections.shuffle(values);
		for(int i = 1; i <= num_messages; i++)
			s16<-broadcastSend("User 16: Ordered message " + values.get(i - 1) + ".", true, false, false, 0, 19 * num_messages, true);
		Collections.shuffle(values);
		for(int i = 1; i <= num_messages; i++)
			s17<-broadcastSend("User 17: Ordered message " + values.get(i - 1) + ".", true, false, false, 0, 19 * num_messages, true);
		Collections.shuffle(values);
		for(int i = 1; i <= num_messages; i++)
			s18<-broadcastSend("User 18: Ordered message " + values.get(i - 1) + ".", true, false, false, 0, 19 * num_messages, true);
		Collections.shuffle(values);
		for(int i = 1; i <= num_messages; i++)
			s19<-broadcastSend("User 19: Ordered message " + values.get(i - 1) + ".", true, false, false, 0, 19 * num_messages, true);
		Collections.shuffle(values);
		for(int i = 1; i <= num_messages; i++)
			s20<-broadcastSend("User 20: Ordered message " + values.get(i - 1) + ".", true, false, false, 0, 19 * num_messages, true);
	}

	void reply(String replyMsg) 
	{
		standardOutput<-println(replyMsg);
	}
	
	void act(String args[])
	{
		try
		{
			Speaker speaker1 = (Speaker) Speaker.getReferenceByName(args[0]);
			Speaker speaker2 = (Speaker) Speaker.getReferenceByName(args[1]);
			Speaker speaker3 = (Speaker) Speaker.getReferenceByName(args[2]);
			Speaker speaker4 = (Speaker) Speaker.getReferenceByName(args[3]);
			Speaker speaker5 = (Speaker) Speaker.getReferenceByName(args[4]);
			Speaker speaker6 = (Speaker) Speaker.getReferenceByName(args[5]);
			Speaker speaker7 = (Speaker) Speaker.getReferenceByName(args[6]);
			Speaker speaker8 = (Speaker) Speaker.getReferenceByName(args[7]);
			Speaker speaker9 = (Speaker) Speaker.getReferenceByName(args[8]);
			Speaker speaker10 = (Speaker) Speaker.getReferenceByName(args[9]);
			Speaker speaker11 = (Speaker) Speaker.getReferenceByName(args[10]);
			Speaker speaker12 = (Speaker) Speaker.getReferenceByName(args[11]);
			Speaker speaker13 = (Speaker) Speaker.getReferenceByName(args[12]);
			Speaker speaker14 = (Speaker) Speaker.getReferenceByName(args[13]);
			Speaker speaker15 = (Speaker) Speaker.getReferenceByName(args[14]);
			Speaker speaker16 = (Speaker) Speaker.getReferenceByName(args[15]);
			Speaker speaker17 = (Speaker) Speaker.getReferenceByName(args[16]);
			Speaker speaker18 = (Speaker) Speaker.getReferenceByName(args[17]);
			Speaker speaker19 = (Speaker) Speaker.getReferenceByName(args[18]);
			Speaker speaker20 = (Speaker) Speaker.getReferenceByName(args[19]);
			int num_messages = Integer.parseInt(args[20]);
			Date first = new Date();
			Timestamp start = new Timestamp(first.getTime());
			standardOutput <- println("Starting time: " + start);
			Instant begin = Instant.now();
			chatSession(speaker1, speaker2, speaker3, speaker4, speaker5, speaker6, speaker7, speaker8, speaker9, speaker10, 
			speaker11, speaker12, speaker13, speaker14, speaker15, speaker16, speaker17, speaker18, speaker19, speaker20, 
			num_messages) @ trackEndingTime(begin) @ standardOutput<-println("Done with chat conversation");
		}
		catch (Exception e)
		{
			standardOutput <- println("Usage: java examples.chat.Chat <friendUAN1> <friendUAN2> <friendUAN3>");
			return;
		}
	}

	void trackEndingTime(Instant begin)
	{
		// keep track of ending time here
		Date second = new Date();
		Timestamp end = new Timestamp(second.getTime());

		// calculate time elapsed
		Instant endTime = Instant.now();
		Duration timeDifference = Duration.between(begin, endTime);
		long timeTaken = timeDifference.toMillis();
		standardOutput <- println("Time taken to run this in milliseconds: " + timeTaken);
		standardOutput<-println("Ending time: " + end);
	}
}
