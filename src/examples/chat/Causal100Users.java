package examples.chat;

// Import declarations generated by the SALSA compiler, do not modify.
import java.io.IOException;
import java.util.Vector;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.InvocationTargetException;

import salsa.language.Actor;
import salsa.language.ActorReference;
import salsa.language.Message;
import salsa.language.RunTime;
import salsa.language.ServiceFactory;
import gc.WeakReference;
import salsa.language.Token;
import salsa.language.exceptions.*;
import salsa.language.exceptions.CurrentContinuationException;

import salsa.language.UniversalActor;

import salsa.naming.UAN;
import salsa.naming.UAL;
import salsa.naming.MalformedUALException;
import salsa.naming.MalformedUANException;

import salsa.resources.SystemService;

import salsa.resources.ActorService;

// End SALSA compiler generated import delcarations.

import java.time.Duration;
import java.time.Instant;
import java.util.Date;
import java.sql.Timestamp;
import java.util.*;

public class Causal100Users extends UniversalActor  {
	public static void main(String args[]) {
		UAN uan = null;
		UAL ual = null;
		if (System.getProperty("uan") != null) {
			uan = new UAN( System.getProperty("uan") );
			ServiceFactory.getTheater();
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("ual") != null) {
			ual = new UAL( System.getProperty("ual") );

			if (uan == null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an actor to have a ual at runtime without a uan.");
				System.err.println("	To give an actor a specific ual at runtime, use the identifier system property.");
				System.exit(0);
			}
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("identifier") != null) {
			if (ual != null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an identifier and a ual with system properties when creating an actor.");
				System.exit(0);
			}
			ual = new UAL( ServiceFactory.getTheater().getLocation() + System.getProperty("identifier"));
		}
		RunTime.receivedMessage();
		Causal100Users instance = (Causal100Users)new Causal100Users(uan, ual,null).construct();
		gc.WeakReference instanceRef=new gc.WeakReference(uan,ual);
		{
			Object[] _arguments = { args };

			//preAct() for local actor creation
			//act() for remote actor creation
			if (ual != null && !ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {instance.send( new Message(instanceRef, instanceRef, "act", _arguments, false) );}
			else {instance.send( new Message(instanceRef, instanceRef, "preAct", _arguments, false) );}
		}
		RunTime.finishedProcessingMessage();
	}

	public static ActorReference getReferenceByName(UAN uan)	{ return new Causal100Users(false, uan); }
	public static ActorReference getReferenceByName(String uan)	{ return Causal100Users.getReferenceByName(new UAN(uan)); }
	public static ActorReference getReferenceByLocation(UAL ual)	{ return new Causal100Users(false, ual); }

	public static ActorReference getReferenceByLocation(String ual)	{ return Causal100Users.getReferenceByLocation(new UAL(ual)); }
	public Causal100Users(boolean o, UAN __uan)	{ super(false,__uan); }
	public Causal100Users(boolean o, UAL __ual)	{ super(false,__ual); }
	public Causal100Users(UAN __uan,UniversalActor.State sourceActor)	{ this(__uan, null, sourceActor); }
	public Causal100Users(UAL __ual,UniversalActor.State sourceActor)	{ this(null, __ual, sourceActor); }
	public Causal100Users(UniversalActor.State sourceActor)		{ this(null, null, sourceActor);  }
	public Causal100Users()		{  }
	public Causal100Users(UAN __uan, UAL __ual, Object obj) {
		//decide the type of sourceActor
		//if obj is null, the actor must be the startup actor.
		//if obj is an actorReference, this actor is created by a remote actor

		if (obj instanceof UniversalActor.State || obj==null) {
			  UniversalActor.State sourceActor;
			  if (obj!=null) { sourceActor=(UniversalActor.State) obj;}
			  else {sourceActor=null;}

			  //remote creation message sent to a remote system service.
			  if (__ual != null && !__ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {
			    WeakReference sourceRef;
			    if (sourceActor!=null && sourceActor.getUAL() != null) {sourceRef = new WeakReference(sourceActor.getUAN(),sourceActor.getUAL());}
			    else {sourceRef = null;}
			    if (sourceActor != null) {
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual!=null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());
			      activateGC();
			    }
			    createRemotely(__uan, __ual, "examples.chat.Causal100Users", sourceRef);
			  }

			  // local creation
			  else {
			    State state = new State(__uan, __ual);

			    //assume the reference is weak
			    muteGC();

			    //the source actor is  the startup actor
			    if (sourceActor == null) {
			      state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			    }

			    //the souce actor is a normal actor
			    else if (sourceActor instanceof UniversalActor.State) {

			      // this reference is part of garbage collection
			      activateGC();

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());

			      /* Garbage collection registration:
			       * register 'this reference' in sourceActor's forward list @
			       * register 'this reference' in the forward acquaintance's inverse list
			       */
			      String inverseRefString=null;
			      if (sourceActor.getUAN()!=null) {inverseRefString=sourceActor.getUAN().toString();}
			      else if (sourceActor.getUAL()!=null) {inverseRefString=sourceActor.getUAL().toString();}
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual != null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}
			      else {sourceActor.getActorMemory().getForwardList().putReference(state.getUAL());}

			      //put the inverse reference information in the actormemory
			      if (inverseRefString!=null) state.getActorMemory().getInverseList().putInverseReference(inverseRefString);
			    }
			    state.updateSelf(this);
			    ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(), state);
			    if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
			  }
		}

		//creation invoked by a remote message
		else if (obj instanceof ActorReference) {
			  ActorReference sourceRef= (ActorReference) obj;
			  State state = new State(__uan, __ual);
			  muteGC();
			  state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			  if (sourceRef.getUAN() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAN());}
			  else if (sourceRef.getUAL() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAL());}
			  state.updateSelf(this);
			  ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(),state);
			  if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
		}
	}

	public UniversalActor construct() {
		Object[] __arguments = { };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public class State extends UniversalActor .State {
		public Causal100Users self;
		public void updateSelf(ActorReference actorReference) {
			((Causal100Users)actorReference).setUAL(getUAL());
			((Causal100Users)actorReference).setUAN(getUAN());
			self = new Causal100Users(false,getUAL());
			self.setUAN(getUAN());
			self.setUAL(getUAL());
			self.activateGC();
		}

		public void preAct(String[] arguments) {
			getActorMemory().getInverseList().removeInverseReference("rmsp://me",1);
			{
				Object[] __args={arguments};
				self.send( new Message(self,self, "act", __args, null,null,false) );
			}
		}

		public State() {
			this(null, null);
		}

		public State(UAN __uan, UAL __ual) {
			super(__uan, __ual);
			addClassName( "examples.chat.Causal100Users$State" );
			addMethodsForClasses();
		}

		public void construct() {}

		public void process(Message message) {
			Method[] matches = getMatches(message.getMethodName());
			Object returnValue = null;
			Exception exception = null;

			if (matches != null) {
				if (!message.getMethodName().equals("die")) {activateArgsGC(message);}
				for (int i = 0; i < matches.length; i++) {
					try {
						if (matches[i].getParameterTypes().length != message.getArguments().length) continue;
						returnValue = matches[i].invoke(this, message.getArguments());
					} catch (Exception e) {
						if (e.getCause() instanceof CurrentContinuationException) {
							sendGeneratedMessages();
							return;
						} else if (e instanceof InvocationTargetException) {
							sendGeneratedMessages();
							exception = (Exception)e.getCause();
							break;
						} else {
							continue;
						}
					}
					sendGeneratedMessages();
					currentMessage.resolveContinuations(returnValue);
					return;
				}
			}

			System.err.println("Message processing exception:");
			if (message.getSource() != null) {
				System.err.println("\tSent by: " + message.getSource().toString());
			} else System.err.println("\tSent by: unknown");
			System.err.println("\tReceived by actor: " + toString());
			System.err.println("\tMessage: " + message.toString());
			if (exception == null) {
				if (matches == null) {
					System.err.println("\tNo methods with the same name found.");
					return;
				}
				System.err.println("\tDid not match any of the following: ");
				for (int i = 0; i < matches.length; i++) {
					System.err.print("\t\tMethod: " + matches[i].getName() + "( ");
					Class[] parTypes = matches[i].getParameterTypes();
					for (int j = 0; j < parTypes.length; j++) {
						System.err.print(parTypes[j].getName() + " ");
					}
					System.err.println(")");
				}
			} else {
				System.err.println("\tThrew exception: " + exception);
				exception.printStackTrace();
			}
		}

		public void chatSession(Speaker s1, Speaker s2, Speaker s3, Speaker s4, Speaker s5, Speaker s6, Speaker s7, Speaker s8, Speaker s9, Speaker s10, Speaker s11, Speaker s12, Speaker s13, Speaker s14, Speaker s15, Speaker s16, Speaker s17, Speaker s18, Speaker s19, Speaker s20, Speaker s21, Speaker s22, Speaker s23, Speaker s24, Speaker s25, Speaker s26, Speaker s27, Speaker s28, Speaker s29, Speaker s30, Speaker s31, Speaker s32, Speaker s33, Speaker s34, Speaker s35, Speaker s36, Speaker s37, Speaker s38, Speaker s39, Speaker s40, Speaker s41, Speaker s42, Speaker s43, Speaker s44, Speaker s45, Speaker s46, Speaker s47, Speaker s48, Speaker s49, Speaker s50, Speaker s51, Speaker s52, Speaker s53, Speaker s54, Speaker s55, Speaker s56, Speaker s57, Speaker s58, Speaker s59, Speaker s60, Speaker s61, Speaker s62, Speaker s63, Speaker s64, Speaker s65, Speaker s66, Speaker s67, Speaker s68, Speaker s69, Speaker s70, Speaker s71, Speaker s72, Speaker s73, Speaker s74, Speaker s75, Speaker s76, Speaker s77, Speaker s78, Speaker s79, Speaker s80, Speaker s81, Speaker s82, Speaker s83, Speaker s84, Speaker s85, Speaker s86, Speaker s87, Speaker s88, Speaker s89, Speaker s90, Speaker s91, Speaker s92, Speaker s93, Speaker s94, Speaker s95, Speaker s96, Speaker s97, Speaker s98, Speaker s99, Speaker s100, int num_messages) {
			ArrayList values = new ArrayList();
			{
				// s1<-setQuestionIdentity()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, s1, "setQuestionIdentity", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				// s2<-setQuestionIdentity()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, s2, "setQuestionIdentity", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				// s3<-setQuestionIdentity()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, s3, "setQuestionIdentity", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				// s4<-setQuestionIdentity()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, s4, "setQuestionIdentity", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				// s5<-setQuestionIdentity()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, s5, "setQuestionIdentity", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				// s6<-setQuestionIdentity()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, s6, "setQuestionIdentity", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				// s7<-setQuestionIdentity()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, s7, "setQuestionIdentity", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				// s8<-setQuestionIdentity()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, s8, "setQuestionIdentity", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				// s9<-setQuestionIdentity()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, s9, "setQuestionIdentity", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				// s10<-setQuestionIdentity()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, s10, "setQuestionIdentity", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				// s11<-setQuestionIdentity()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, s11, "setQuestionIdentity", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				// s12<-setQuestionIdentity()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, s12, "setQuestionIdentity", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				// s13<-setQuestionIdentity()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, s13, "setQuestionIdentity", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				// s14<-setQuestionIdentity()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, s14, "setQuestionIdentity", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				// s15<-setQuestionIdentity()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, s15, "setQuestionIdentity", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				// s16<-setQuestionIdentity()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, s16, "setQuestionIdentity", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				// s17<-setQuestionIdentity()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, s17, "setQuestionIdentity", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				// s18<-setQuestionIdentity()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, s18, "setQuestionIdentity", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				// s19<-setQuestionIdentity()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, s19, "setQuestionIdentity", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				// s20<-setQuestionIdentity()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, s20, "setQuestionIdentity", _arguments, null, null );
					__messages.add( message );
				}
			}
			for (int i = 1; i<=num_messages; i++)values.add(i);
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s1<-broadcastSend("User 1: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 1: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true };
					Message message = new Message( self, s1, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s2<-broadcastSend("User 2: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 2: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true };
					Message message = new Message( self, s2, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s3<-broadcastSend("User 3: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 3: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true };
					Message message = new Message( self, s3, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s4<-broadcastSend("User 4: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 4: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true };
					Message message = new Message( self, s4, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s5<-broadcastSend("User 5: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 5: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true };
					Message message = new Message( self, s5, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s6<-broadcastSend("User 6: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 6: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true };
					Message message = new Message( self, s6, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s7<-broadcastSend("User 7: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 7: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true };
					Message message = new Message( self, s7, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s8<-broadcastSend("User 8: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 8: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true };
					Message message = new Message( self, s8, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s9<-broadcastSend("User 9: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 9: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true };
					Message message = new Message( self, s9, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s10<-broadcastSend("User 10: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 10: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true };
					Message message = new Message( self, s10, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s11<-broadcastSend("User 11: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 11: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true };
					Message message = new Message( self, s11, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s12<-broadcastSend("User 12: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 12: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true };
					Message message = new Message( self, s12, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s13<-broadcastSend("User 13: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 13: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true };
					Message message = new Message( self, s13, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s14<-broadcastSend("User 14: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 14: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true };
					Message message = new Message( self, s14, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s15<-broadcastSend("User 15: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 15: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true };
					Message message = new Message( self, s15, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s16<-broadcastSend("User 16: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 16: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true };
					Message message = new Message( self, s16, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s17<-broadcastSend("User 17: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 17: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true };
					Message message = new Message( self, s17, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s18<-broadcastSend("User 18: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 18: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true };
					Message message = new Message( self, s18, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s19<-broadcastSend("User 19: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 19: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true };
					Message message = new Message( self, s19, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s20<-broadcastSend("User 20: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 20: Question "+values.get(i-1)+".", false, true, false, num_messages, 99*num_messages, true };
					Message message = new Message( self, s20, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s21<-broadcastSend("User 21: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 21: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s21, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s22<-broadcastSend("User 22: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 22: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s22, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s23<-broadcastSend("User 23: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 23: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s23, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s24<-broadcastSend("User 24: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 24: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s24, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s25<-broadcastSend("User 25: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 25: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s25, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s26<-broadcastSend("User 26: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 26: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s26, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s27<-broadcastSend("User 27: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 27: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s27, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s28<-broadcastSend("User 28: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 28: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s28, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s29<-broadcastSend("User 29: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 29: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s29, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s30<-broadcastSend("User 30: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 30: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s30, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s31<-broadcastSend("User 31: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 31: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s31, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s32<-broadcastSend("User 32: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 32: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s32, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s33<-broadcastSend("User 33: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 33: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s33, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s34<-broadcastSend("User 34: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 34: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s34, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s35<-broadcastSend("User 35: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 35: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s35, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s36<-broadcastSend("User 36: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 36: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s36, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s37<-broadcastSend("User 37: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 37: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s37, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s38<-broadcastSend("User 38: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 38: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s38, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s39<-broadcastSend("User 39: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 39: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s39, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s40<-broadcastSend("User 40: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 40: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s40, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s41<-broadcastSend("User 41: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 41: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s41, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s42<-broadcastSend("User 42: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 42: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s42, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s43<-broadcastSend("User 43: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 43: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s43, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s44<-broadcastSend("User 44: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 44: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s44, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s45<-broadcastSend("User 45: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 45: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s45, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s46<-broadcastSend("User 46: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 46: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s46, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s47<-broadcastSend("User 47: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 47: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s47, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s48<-broadcastSend("User 48: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 48: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s48, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s49<-broadcastSend("User 49: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 49: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s49, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s50<-broadcastSend("User 50: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 50: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s50, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s51<-broadcastSend("User 51: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 51: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s51, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s52<-broadcastSend("User 52: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 52: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s52, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s53<-broadcastSend("User 53: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 53: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s53, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s54<-broadcastSend("User 54: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 54: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s54, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s55<-broadcastSend("User 55: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 55: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s55, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s56<-broadcastSend("User 56: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 56: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s56, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s57<-broadcastSend("User 57: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 57: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s57, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s58<-broadcastSend("User 58: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 58: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s58, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s59<-broadcastSend("User 59: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 59: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s59, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s60<-broadcastSend("User 60: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 60: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s60, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s61<-broadcastSend("User 61: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 61: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s61, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s62<-broadcastSend("User 62: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 62: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s62, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s63<-broadcastSend("User 63: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 63: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s63, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s64<-broadcastSend("User 64: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 64: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s64, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s65<-broadcastSend("User 65: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 65: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s65, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s66<-broadcastSend("User 66: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 66: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s66, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s67<-broadcastSend("User 67: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 67: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s67, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s68<-broadcastSend("User 68: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 68: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s68, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s69<-broadcastSend("User 69: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 69: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s69, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s70<-broadcastSend("User 70: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 70: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s70, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s71<-broadcastSend("User 71: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 71: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s71, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s72<-broadcastSend("User 72: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 72: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s72, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s73<-broadcastSend("User 73: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 73: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s73, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s74<-broadcastSend("User 74: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 74: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s74, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s75<-broadcastSend("User 75: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 75: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s75, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s76<-broadcastSend("User 76: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 76: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s76, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s77<-broadcastSend("User 77: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 77: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s77, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s78<-broadcastSend("User 78: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 78: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s78, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s79<-broadcastSend("User 79: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 79: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s79, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s80<-broadcastSend("User 80: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 80: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s80, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s81<-broadcastSend("User 81: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 81: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s81, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s82<-broadcastSend("User 82: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 82: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s82, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s83<-broadcastSend("User 83: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 83: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s83, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s84<-broadcastSend("User 84: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 84: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s84, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s85<-broadcastSend("User 85: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 85: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s85, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s86<-broadcastSend("User 86: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 86: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s86, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s87<-broadcastSend("User 87: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 87: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s87, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s88<-broadcastSend("User 88: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 88: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s88, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s89<-broadcastSend("User 89: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 89: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s89, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s90<-broadcastSend("User 90: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 90: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s90, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s91<-broadcastSend("User 91: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 91: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s91, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s92<-broadcastSend("User 92: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 92: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s92, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s93<-broadcastSend("User 93: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 93: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s93, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s94<-broadcastSend("User 94: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 94: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s94, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s95<-broadcastSend("User 95: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 95: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s95, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s96<-broadcastSend("User 96: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 96: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s96, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s97<-broadcastSend("User 97: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 97: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s97, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s98<-broadcastSend("User 98: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 98: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s98, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s99<-broadcastSend("User 99: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 99: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s99, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s100<-broadcastSend("User 100: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true)
				{
					Object _arguments[] = { "User 100: Answer "+values.get(i-1)+".", false, false, true, num_messages, 99*num_messages, true };
					Message message = new Message( self, s100, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
		}
		public void reply(String replyMsg) {
			{
				// standardOutput<-println(replyMsg)
				{
					Object _arguments[] = { replyMsg };
					Message message = new Message( self, standardOutput, "println", _arguments, null, null );
					__messages.add( message );
				}
			}
		}
		public void act(String args[]) {
			try {
				Speaker speaker1 = (Speaker)Speaker.getReferenceByName(args[0]);
				Speaker speaker2 = (Speaker)Speaker.getReferenceByName(args[1]);
				Speaker speaker3 = (Speaker)Speaker.getReferenceByName(args[2]);
				Speaker speaker4 = (Speaker)Speaker.getReferenceByName(args[3]);
				Speaker speaker5 = (Speaker)Speaker.getReferenceByName(args[4]);
				Speaker speaker6 = (Speaker)Speaker.getReferenceByName(args[5]);
				Speaker speaker7 = (Speaker)Speaker.getReferenceByName(args[6]);
				Speaker speaker8 = (Speaker)Speaker.getReferenceByName(args[7]);
				Speaker speaker9 = (Speaker)Speaker.getReferenceByName(args[8]);
				Speaker speaker10 = (Speaker)Speaker.getReferenceByName(args[9]);
				Speaker speaker11 = (Speaker)Speaker.getReferenceByName(args[10]);
				Speaker speaker12 = (Speaker)Speaker.getReferenceByName(args[11]);
				Speaker speaker13 = (Speaker)Speaker.getReferenceByName(args[12]);
				Speaker speaker14 = (Speaker)Speaker.getReferenceByName(args[13]);
				Speaker speaker15 = (Speaker)Speaker.getReferenceByName(args[14]);
				Speaker speaker16 = (Speaker)Speaker.getReferenceByName(args[15]);
				Speaker speaker17 = (Speaker)Speaker.getReferenceByName(args[16]);
				Speaker speaker18 = (Speaker)Speaker.getReferenceByName(args[17]);
				Speaker speaker19 = (Speaker)Speaker.getReferenceByName(args[18]);
				Speaker speaker20 = (Speaker)Speaker.getReferenceByName(args[19]);
				Speaker speaker21 = (Speaker)Speaker.getReferenceByName(args[20]);
				Speaker speaker22 = (Speaker)Speaker.getReferenceByName(args[21]);
				Speaker speaker23 = (Speaker)Speaker.getReferenceByName(args[22]);
				Speaker speaker24 = (Speaker)Speaker.getReferenceByName(args[23]);
				Speaker speaker25 = (Speaker)Speaker.getReferenceByName(args[24]);
				Speaker speaker26 = (Speaker)Speaker.getReferenceByName(args[25]);
				Speaker speaker27 = (Speaker)Speaker.getReferenceByName(args[26]);
				Speaker speaker28 = (Speaker)Speaker.getReferenceByName(args[27]);
				Speaker speaker29 = (Speaker)Speaker.getReferenceByName(args[28]);
				Speaker speaker30 = (Speaker)Speaker.getReferenceByName(args[29]);
				Speaker speaker31 = (Speaker)Speaker.getReferenceByName(args[30]);
				Speaker speaker32 = (Speaker)Speaker.getReferenceByName(args[31]);
				Speaker speaker33 = (Speaker)Speaker.getReferenceByName(args[32]);
				Speaker speaker34 = (Speaker)Speaker.getReferenceByName(args[33]);
				Speaker speaker35 = (Speaker)Speaker.getReferenceByName(args[34]);
				Speaker speaker36 = (Speaker)Speaker.getReferenceByName(args[35]);
				Speaker speaker37 = (Speaker)Speaker.getReferenceByName(args[36]);
				Speaker speaker38 = (Speaker)Speaker.getReferenceByName(args[37]);
				Speaker speaker39 = (Speaker)Speaker.getReferenceByName(args[38]);
				Speaker speaker40 = (Speaker)Speaker.getReferenceByName(args[39]);
				Speaker speaker41 = (Speaker)Speaker.getReferenceByName(args[40]);
				Speaker speaker42 = (Speaker)Speaker.getReferenceByName(args[41]);
				Speaker speaker43 = (Speaker)Speaker.getReferenceByName(args[42]);
				Speaker speaker44 = (Speaker)Speaker.getReferenceByName(args[43]);
				Speaker speaker45 = (Speaker)Speaker.getReferenceByName(args[44]);
				Speaker speaker46 = (Speaker)Speaker.getReferenceByName(args[45]);
				Speaker speaker47 = (Speaker)Speaker.getReferenceByName(args[46]);
				Speaker speaker48 = (Speaker)Speaker.getReferenceByName(args[47]);
				Speaker speaker49 = (Speaker)Speaker.getReferenceByName(args[48]);
				Speaker speaker50 = (Speaker)Speaker.getReferenceByName(args[49]);
				Speaker speaker51 = (Speaker)Speaker.getReferenceByName(args[50]);
				Speaker speaker52 = (Speaker)Speaker.getReferenceByName(args[51]);
				Speaker speaker53 = (Speaker)Speaker.getReferenceByName(args[52]);
				Speaker speaker54 = (Speaker)Speaker.getReferenceByName(args[53]);
				Speaker speaker55 = (Speaker)Speaker.getReferenceByName(args[54]);
				Speaker speaker56 = (Speaker)Speaker.getReferenceByName(args[55]);
				Speaker speaker57 = (Speaker)Speaker.getReferenceByName(args[56]);
				Speaker speaker58 = (Speaker)Speaker.getReferenceByName(args[57]);
				Speaker speaker59 = (Speaker)Speaker.getReferenceByName(args[58]);
				Speaker speaker60 = (Speaker)Speaker.getReferenceByName(args[59]);
				Speaker speaker61 = (Speaker)Speaker.getReferenceByName(args[60]);
				Speaker speaker62 = (Speaker)Speaker.getReferenceByName(args[61]);
				Speaker speaker63 = (Speaker)Speaker.getReferenceByName(args[62]);
				Speaker speaker64 = (Speaker)Speaker.getReferenceByName(args[63]);
				Speaker speaker65 = (Speaker)Speaker.getReferenceByName(args[64]);
				Speaker speaker66 = (Speaker)Speaker.getReferenceByName(args[65]);
				Speaker speaker67 = (Speaker)Speaker.getReferenceByName(args[66]);
				Speaker speaker68 = (Speaker)Speaker.getReferenceByName(args[67]);
				Speaker speaker69 = (Speaker)Speaker.getReferenceByName(args[68]);
				Speaker speaker70 = (Speaker)Speaker.getReferenceByName(args[69]);
				Speaker speaker71 = (Speaker)Speaker.getReferenceByName(args[70]);
				Speaker speaker72 = (Speaker)Speaker.getReferenceByName(args[71]);
				Speaker speaker73 = (Speaker)Speaker.getReferenceByName(args[72]);
				Speaker speaker74 = (Speaker)Speaker.getReferenceByName(args[73]);
				Speaker speaker75 = (Speaker)Speaker.getReferenceByName(args[74]);
				Speaker speaker76 = (Speaker)Speaker.getReferenceByName(args[75]);
				Speaker speaker77 = (Speaker)Speaker.getReferenceByName(args[76]);
				Speaker speaker78 = (Speaker)Speaker.getReferenceByName(args[77]);
				Speaker speaker79 = (Speaker)Speaker.getReferenceByName(args[78]);
				Speaker speaker80 = (Speaker)Speaker.getReferenceByName(args[79]);
				Speaker speaker81 = (Speaker)Speaker.getReferenceByName(args[80]);
				Speaker speaker82 = (Speaker)Speaker.getReferenceByName(args[81]);
				Speaker speaker83 = (Speaker)Speaker.getReferenceByName(args[82]);
				Speaker speaker84 = (Speaker)Speaker.getReferenceByName(args[83]);
				Speaker speaker85 = (Speaker)Speaker.getReferenceByName(args[84]);
				Speaker speaker86 = (Speaker)Speaker.getReferenceByName(args[85]);
				Speaker speaker87 = (Speaker)Speaker.getReferenceByName(args[86]);
				Speaker speaker88 = (Speaker)Speaker.getReferenceByName(args[87]);
				Speaker speaker89 = (Speaker)Speaker.getReferenceByName(args[88]);
				Speaker speaker90 = (Speaker)Speaker.getReferenceByName(args[89]);
				Speaker speaker91 = (Speaker)Speaker.getReferenceByName(args[90]);
				Speaker speaker92 = (Speaker)Speaker.getReferenceByName(args[91]);
				Speaker speaker93 = (Speaker)Speaker.getReferenceByName(args[92]);
				Speaker speaker94 = (Speaker)Speaker.getReferenceByName(args[93]);
				Speaker speaker95 = (Speaker)Speaker.getReferenceByName(args[94]);
				Speaker speaker96 = (Speaker)Speaker.getReferenceByName(args[95]);
				Speaker speaker97 = (Speaker)Speaker.getReferenceByName(args[96]);
				Speaker speaker98 = (Speaker)Speaker.getReferenceByName(args[97]);
				Speaker speaker99 = (Speaker)Speaker.getReferenceByName(args[98]);
				Speaker speaker100 = (Speaker)Speaker.getReferenceByName(args[99]);
				int num_messages = Integer.parseInt(args[100]);
				Date first = new Date();
				Timestamp start = new Timestamp(first.getTime());
				{
					// standardOutput<-println("Starting time: "+start)
					{
						Object _arguments[] = { "Starting time: "+start };
						Message message = new Message( self, standardOutput, "println", _arguments, null, null );
						__messages.add( message );
					}
				}
				Instant begin = Instant.now();
				{
					Token token_3_0 = new Token();
					Token token_3_1 = new Token();
					// chatSession(speaker1, speaker2, speaker3, speaker4, speaker5, speaker6, speaker7, speaker8, speaker9, speaker10, speaker11, speaker12, speaker13, speaker14, speaker15, speaker16, speaker17, speaker18, speaker19, speaker20, speaker21, speaker22, speaker23, speaker24, speaker25, speaker26, speaker27, speaker28, speaker29, speaker30, speaker31, speaker32, speaker33, speaker34, speaker35, speaker36, speaker37, speaker38, speaker39, speaker40, speaker41, speaker42, speaker43, speaker44, speaker45, speaker46, speaker47, speaker48, speaker49, speaker50, speaker51, speaker52, speaker53, speaker54, speaker55, speaker56, speaker57, speaker58, speaker59, speaker60, speaker61, speaker62, speaker63, speaker64, speaker65, speaker66, speaker67, speaker68, speaker69, speaker70, speaker71, speaker72, speaker73, speaker74, speaker75, speaker76, speaker77, speaker78, speaker79, speaker80, speaker81, speaker82, speaker83, speaker84, speaker85, speaker86, speaker87, speaker88, speaker89, speaker90, speaker91, speaker92, speaker93, speaker94, speaker95, speaker96, speaker97, speaker98, speaker99, speaker100, num_messages)
					{
						Object _arguments[] = { speaker1, speaker2, speaker3, speaker4, speaker5, speaker6, speaker7, speaker8, speaker9, speaker10, speaker11, speaker12, speaker13, speaker14, speaker15, speaker16, speaker17, speaker18, speaker19, speaker20, speaker21, speaker22, speaker23, speaker24, speaker25, speaker26, speaker27, speaker28, speaker29, speaker30, speaker31, speaker32, speaker33, speaker34, speaker35, speaker36, speaker37, speaker38, speaker39, speaker40, speaker41, speaker42, speaker43, speaker44, speaker45, speaker46, speaker47, speaker48, speaker49, speaker50, speaker51, speaker52, speaker53, speaker54, speaker55, speaker56, speaker57, speaker58, speaker59, speaker60, speaker61, speaker62, speaker63, speaker64, speaker65, speaker66, speaker67, speaker68, speaker69, speaker70, speaker71, speaker72, speaker73, speaker74, speaker75, speaker76, speaker77, speaker78, speaker79, speaker80, speaker81, speaker82, speaker83, speaker84, speaker85, speaker86, speaker87, speaker88, speaker89, speaker90, speaker91, speaker92, speaker93, speaker94, speaker95, speaker96, speaker97, speaker98, speaker99, speaker100, num_messages };
						Message message = new Message( self, self, "chatSession", _arguments, null, token_3_0 );
						__messages.add( message );
					}
					// trackEndingTime(begin)
					{
						Object _arguments[] = { begin };
						Message message = new Message( self, self, "trackEndingTime", _arguments, token_3_0, token_3_1 );
						__messages.add( message );
					}
					// standardOutput<-println("Done with chat conversation")
					{
						Object _arguments[] = { "Done with chat conversation" };
						Message message = new Message( self, standardOutput, "println", _arguments, token_3_1, null );
						__messages.add( message );
					}
				}
			}
			catch (Exception e) {
				{
					// standardOutput<-println("Usage: java examples.chat.Chat <friendUAN1> <friendUAN2> <friendUAN3>")
					{
						Object _arguments[] = { "Usage: java examples.chat.Chat <friendUAN1> <friendUAN2> <friendUAN3>" };
						Message message = new Message( self, standardOutput, "println", _arguments, null, null );
						__messages.add( message );
					}
				}
				return;
			}

		}
		public void trackEndingTime(Instant begin) {
			Date second = new Date();
			Timestamp end = new Timestamp(second.getTime());
			Instant endTime = Instant.now();
			Duration timeDifference = Duration.between(begin, endTime);
			long timeTaken = timeDifference.toMillis();
			{
				// standardOutput<-println("Time taken to run this in milliseconds: "+timeTaken)
				{
					Object _arguments[] = { "Time taken to run this in milliseconds: "+timeTaken };
					Message message = new Message( self, standardOutput, "println", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				// standardOutput<-println("Ending time: "+end)
				{
					Object _arguments[] = { "Ending time: "+end };
					Message message = new Message( self, standardOutput, "println", _arguments, null, null );
					__messages.add( message );
				}
			}
		}
	}
}