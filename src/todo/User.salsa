module todo;

import java.util.Set;
import java.util.HashSet;
import java.util.Date;
import java.sql.Timestamp;
import java.util.Iterator;
import java.util.Queue;
import java.util.LinkedList;
import java.util.ArrayList;

behavior User implements ActorService
{
	private String myName="";
	private String emailId="";
	private String status="";
	Server server_ref;
	boolean isLeader = false;
	ArrayList initialList = new ArrayList();
	Queue waitQueue = new LinkedList();
	Queue messageQueue = new LinkedList();

	// these are the tasks the user owns
	ArrayList tasks = new ArrayList();

	User(String id, String email, String status)
	{
		myName = id;
		emailId = email;
		status = status;
	}

	void setIsLeader()
	{
		isLeader = true;		
	}

	void broadcastReceive(Task task,String taskName, String text,boolean update, int number_of_initials, int total_updates,boolean isFollowup) throws InterruptedException
	{
		if(update)
		{
			// update case
			for(int i = 0; i < tasks.size(); i++)
			{

			    Task storedTask = (Task) tasks.get(i);
				if(taskName.equals(storedTask.getTaskName()))
				{
					storedTask.updateTask(text);
					String follow_up = "";
					if(!isFollowup)
						follow_up = "Initial Task";
					else
						follow_up = "Follow Up Task";
					Thread.sleep(200);
					Date date = new Date();
					Timestamp current = new Timestamp(date.getTime());
					standardOutput<-println("[Speaker Remote] " + myName + ": " + "Upd Message: " + "Task name: " + taskName + "Task type: " + follow_up + "; Task text: " + text + "; Timestamp: " + current);
					break;
				}
			}
		}
		else
		{
			if(number_of_initials == 0)
			{
				tasks.add(task);
				String follow_up = "";
				if(!isFollowup)
					follow_up = "Initial Task";
				else
					follow_up = "Follow Up Task";
				Thread.sleep(200);
				Date date = new Date();
				Timestamp current = new Timestamp(date.getTime());
				standardOutput<-println("[Speaker Remote] " + myName + ": " + "Add Message: " + "Task name: " + task.getTaskName() + "Task type: " + follow_up + "; Task text: " + task.getTaskText() + "; Timestamp: " + current);
			}
			else
			{
				if(isFollowup)
				{
					// handles follow up case
					if(initialList.size() == number_of_initials || isLeader)
					{
						if(waitQueue.size() > 0)
						{
							while(waitQueue.size() > 0)
							{
								Task currentTask = (Task) waitQueue.remove();
								tasks.add(currentTask);
								String follow_up_two = "";
								if(currentTask.getFollowtype())
									follow_up_two = "Follow Up Task";
								else
									follow_up_two = "Initial Task";
								Thread.sleep(200);
								Date date = new Date();
								Timestamp current = new Timestamp(date.getTime());
								standardOutput<-println("[Speaker Remote] " + myName + ": " + "Add Message: " + "Task name: " + currentTask.getTaskName() + "Task type: " + follow_up_two + "; Task text: " + currentTask.getTaskText() + "; Timestamp: " + current);
							}
						}
						tasks.add(task);
						String follow_up = "";
						if(!isFollowup)
							follow_up = "Initial Task";
						else
							follow_up = "Follow Up Task";
						Thread.sleep(200);
						Date date_two = new Date();
						Timestamp current_two = new Timestamp(date_two.getTime());
						standardOutput<-println("[Speaker Remote] " + myName + ": " + "Add Message: " + "Task name: " + task.getTaskName() + "Task type: " + follow_up + "; Task text: " + task.getTaskText() + "; Timestamp: " + current_two);
					}
					else
					{
						waitQueue.add(task);
					}
				}
				else
				{
					// handles initial case
					tasks.add(task);
					initialList.add(task);
					String follow_up = "";
					if(!isFollowup)
						follow_up = "Initial Task";
					else
						follow_up = "Follow Up Task";
					Thread.sleep(200);
					Date date = new Date();
					Timestamp current = new Timestamp(date.getTime());
					standardOutput<-println("[Speaker Remote] " + myName + ": " + "Add Message: " + "Task name: " + task.getTaskName() + "Task type: " + follow_up + "; Task text: " + task.getTaskText() + "; Timestamp: " + current);
					if(initialList.size() == number_of_initials || isLeader)
					{
						if(waitQueue.size() > 0)
						{
							while(waitQueue.size() > 0)
							{
								Task currentTask = (Task) waitQueue.remove();
								tasks.add(currentTask);
								String follow_up_two = "";
								if(currentTask.getFollowtype())
									follow_up_two = "Follow Up Task";
								else
									follow_up_two = "Initial Task";
								Thread.sleep(200);
								Date date_two = new Date();
								Timestamp current_two = new Timestamp(date_two.getTime());
								standardOutput<-println("[Speaker Remote] " + myName + ": " + "Add Message: " + "Task name: " + currentTask.getTaskName() + "Task type: " + follow_up_two + "; Task text: " + currentTask.getTaskText() + "; Timestamp: " + current_two);
							}
						}
					}
				}
			}
		}
	}
	
	void broadcastReceiveAdvanced(Task task,String taskName, String text,boolean update, int number_of_initials, int total_updates,boolean isFollowup) throws InterruptedException
	{
		// ignore update case for simplicity here since that is not tested anyways
		if(number_of_initials == 0)
		{
			// no waiting involved here
			messageQueue.add(task);
		}
		else
		{
			if(isFollowup)
			{
				// handles follow up case
				if(initialList.size() == number_of_initials || isLeader)
				{
					if(waitQueue.size() > 0)
					{
						while(waitQueue.size() > 0)
						{
							Task currentTask = (Task) waitQueue.remove();
							messageQueue.add(currentTask);
						}
					}
					messageQueue.add(task);
				}
				else
				{
					waitQueue.add(task);
				}
			}
			else
			{
				// handles initial case
				initialList.add(task);
				messageQueue.add(task);
				if(initialList.size() == number_of_initials || isLeader)
				{
					if(waitQueue.size() > 0)
					{
						while(waitQueue.size() > 0)
						{
							Task currentTask = (Task) waitQueue.remove();
							messageQueue.add(currentTask);
						}
					}
				}
			}
		}
		if(messageQueue.size() == total_updates)
		{
			while(messageQueue.size() > 0)
			{
				tasks.add(messageQueue.remove());
				Thread.sleep(200);
			}
			Date date = new Date();
			Timestamp current = new Timestamp(date.getTime());
			standardOutput<-println("Overall Timestamp: " + current);
			for(int i = 0; i < tasks.size(); i++)
			{
				String follow_up = "";
				Task currentTask = (Task)tasks.get(i);
				if(currentTask.getFollowtype())
					follow_up = "Follow Up Task";
				else
					follow_up = "Initial Task";
				standardOutput<-println("Task type: " + follow_up + "; Task text: " + currentTask.getTaskText());
			}
		}
	}
	
	boolean handleFifoCode(String speakerName, String msg, String type, boolean isQuestion) throws InterruptedException
	{
		Integer current_value = Integer.parseInt(msg.substring(10).replaceAll("[\\D]", ""));
		Integer current_user = Integer.parseInt(msg.substring(0, 10).replaceAll("[\\D]", ""));
		if(!valuesAdded.containsKey(current_user))
		{
			ArrayList vals = new ArrayList();
			valuesAdded.put(current_user, vals);
		}
		if(!fifoValues.containsKey(current_user))
		{
			ArrayList vals = new ArrayList();
			ArrayList msgVals = new ArrayList();
			fifoValues.put(current_user, vals);
			fifoMessageValues.put(current_user, msgVals);
		}
		ArrayList currentAdded = (ArrayList)valuesAdded.get(current_user);
		ArrayList currentFifo = (ArrayList)fifoValues.get(current_user);
		ArrayList currentFifoMessages = (ArrayList)fifoMessageValues.get(current_user);
		boolean isAdded = false;
		if((currentAdded.size() == 0 && current_value == 1) || (currentAdded.size() > 0 && ((Integer)currentAdded.get(currentAdded.size() - 1) == current_value - 1)))
		{
			currentAdded.add(current_value);
			messages.add(msg);
			Thread.sleep(200);
			
			// next mark the timestamp
			Date date_four = new Date();
			Timestamp current_four = new Timestamp(date_four.getTime());
			if(isQuestion)
				questionTimeStamp.put(msg, current_four);
			standardOutput<-println("[Speaker Remote] " + speakerName + ": " + type +": "+ msg + "; Timestamp: " + current_four);
			int i = -1;
			for(i = 0; i < currentFifo.size(); i++)
			{
				if((Integer)currentFifo.get(i) == current_value + 1)
				{
					current_value = (Integer)currentFifo.get(i);
					String current_message = (String)currentFifoMessages.get(i);
					currentAdded.add(current_value);
					messages.add(current_message);
					Thread.sleep(200);
					Date date_five = new Date();
					Timestamp current_five = new Timestamp(date_five.getTime());
					if(isQuestion)
						questionTimeStamp.put(current_message, current_five);
					standardOutput<-println("[Speaker Remote] " + speakerName + ": " + type +": "+ current_message + "; Timestamp: " + current_five);
				}
				else
					break;
			}
			while(i > 0)
			{
				currentFifoMessages.remove(0);
				currentFifo.remove(0);
				i--;
			}
			isAdded = true;
		}
		else
		{
			if(currentFifo.size() == 0)
			{
				currentFifo.add(current_value);
				currentFifoMessages.add(msg);
			}
			else
			{
				if(current_value < (Integer)currentFifo.get(0))
				{
					currentFifo.add(0, current_value);
					currentFifoMessages.add(0, msg);
				}
				else
				{
					int i = -1;
					boolean added = false;
					for(i = 0; i < currentFifo.size(); i++)
					{
						if(current_value < (Integer)currentFifo.get(i))
						{
							added = true;
							currentFifo.add(i, current_value);
							currentFifoMessages.add(i, msg);
							break;
						}
					}
					if(!added)
					{
						currentFifo.add(i, current_value);
						currentFifoMessages.add(i, msg);
					}
				}
			}
		}
		valuesAdded.put(current_user, currentAdded);
		fifoValues.put(current_user, currentFifo);
		fifoMessageValues.put(current_user, currentFifoMessages);
		return isAdded;
	}
	
	String getUserName()
	{
		return myName;
	}

    void whereAmI()
	{
		standardOutput<-println("User started with uan: "+ getUAN().toString());
	}

	boolean addTaskToList(TaskList taskList, String text, String creator, String name, boolean isFollowup, int number_of_initials, int total_updates)
	{
		// get first timestamp here
		Date date = new Date();
		Timestamp current = new Timestamp(date.getTime());
		String follow_up = "";
		if(isFollowup)
			follow_up = "Follow Up Task";
		else
			follow_up = "Initial Task";
		Task task = new Task(text,creator,name,isFollowup);
		standardOutput<-println("[Speaker Local] " + myName + ": " + "Add message: " + "Task name: " + name + "Task type: " + follow_up + "; Task text: " + task.getTaskText() + "; Timestamp: " + current) @
	    server_ref<-addTaskToList(taskList, task,name,text, myName, total_updates, number_of_initials, isFollowup);
	    return true;
	}

	boolean updateTask(Task task, String text, String name,int number_of_initials, int total_updates)
	{
		Date date = new Date();
		Timestamp current = new Timestamp(date.getTime());
		standardOutput<-println("[Speaker Local] " + myName + ": " + "Upd message: " + "Task name: " + name + "Task type: Initial task" + "; Task text: " + text + "; Timestamp: " + current) @
		//Task task,String name,String text, String creator, int number_of_updates, int total_initials
		server_ref<-updateTask(task,name, text, myName, total_updates, number_of_initials);
		return true;
	}

	void act(String args[])
	{
		if(args.length != 2)
		{
			standardOutput<-println("Usage: java -Duan=uan://hostname/place todo.User <serverName> <myName>");
			return;
		}
		myName=args[1];
		server_ref = (Server) Server.getReferenceByName(args[0]);
		whereAmI() @
		standardOutput<-println("Messaging server");
		server_ref<-registerUser(myName,emailId,status,self) @
		standardOutput<-println("Finished registering");
	}	
}
