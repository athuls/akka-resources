module examples.chat;
import java.util.Date;
import java.sql.Timestamp;
import java.util.Map;
import java.util.HashMap;
import examples.chat.ChatMessage.MessageType;
import java.util.Iterator;
import java.util.Queue;
import java.util.LinkedList;
import java.util.ArrayList;

// simple user class - this maintains an overall user implementation
behavior Speaker implements ActorService
{
	private String myName="";	
	Server server_ref;
	Map questionTimeStamp = new HashMap();
	Queue answerQueue = new LinkedList();
	ArrayList messages = new ArrayList();
	Queue messageQueue = new LinkedList();
	boolean isQuestion = false;
	Map fifoValues = new HashMap();
	Map fifoMessageValues = new HashMap();
	Map valuesAdded = new HashMap();

	Speaker(String name, String serverRef)
	{
		myName = name;
		server_ref = (Server) Server.getReferenceByName(serverRef);
	}

	// function used to set the identity of this user as someone questioning
	void setQuestionIdentity()
	{
		isQuestion = true;
	}

	// simple processing of the message by calling server's broadcast
	// this also prints out the timestamp at the beginning
	void broadcastSend(String msg, boolean is_statement, boolean is_question, boolean is_answer, int number_of_questions, int total_messages, boolean fifo) 
	{
		Date date = new Date();
		Timestamp current = new Timestamp(date.getTime());
		String type = "";
		if(is_statement)
			type = "STATEMENT";
		else if(is_question)
			type = "QUESTION";
		else if(is_answer)
			type = "ANSWER";
		standardOutput<-println("[Speaker Local] " + myName + ": " + type +": "+ msg + "; Timestamp: " + current) @ 
		server_ref<-broadcast(myName, msg, type, number_of_questions, total_messages, fifo);
	}	

	// this function handles messages accordingly by their type and adds them to the user's own chat message list - non single glitch
	void broadcastReceive(String speakerName, String msg, String type, int number_of_questions, int total_messages, boolean fifo) throws InterruptedException
	{
		switch (type)
		{
			case "QUESTION":
				handleFifoCode(speakerName, msg, type, true) @
				handleNormalStall(speakerName, number_of_questions, total_messages);
				break;
			case "ANSWER":
				// check if there has been a question already placed
				double number_users = (total_messages + number_of_questions) / number_of_questions;
				double total_questions = number_users * 0.2 * number_of_questions;
				if(questionTimeStamp.values().size() == total_questions || (isQuestion && questionTimeStamp.values().size() == (int)(total_questions - number_of_questions)))
				{
					if(answerQueue.size() > 0)
					{
						// empty out queue
						while(answerQueue.size() > 0)
						{
							String chatMessage = (String) answerQueue.remove();

							// add the message to the list and print timestamp
							handleFifoCode(speakerName, chatMessage, "ANSWER", false);
						}						
					}
					handleFifoCode(speakerName, msg, "ANSWER", false);
				}
				else
				{
					// store the message for later processing
					answerQueue.add(msg);
				}
				break;
			default:
				if(fifo)
				{
					handleFifoCode(speakerName, msg, type, false);
				}
				else
				{
					messages.add(msg);
					Thread.sleep(200);

					// next mark the timestamp
					Date date_four = new Date();
					Timestamp current_four = new Timestamp(date_four.getTime());
					standardOutput<-println("[Speaker Remote] " + speakerName + ": " + type +": "+ msg + "; Timestamp: " + current_four);
				}
				break;
		}
	}
	
	void handleNormalStall(String speakerName, int number_of_questions, int total_messages)
	{
		double number_users = (total_messages + number_of_questions)/ number_of_questions;
		double total_questions = number_users * 0.2 * number_of_questions;
		if(questionTimeStamp.values().size() == total_questions || (isQuestion && questionTimeStamp.values().size() == (int)(total_questions - number_of_questions)))
		{
			if(answerQueue.size() > 0)
			{
				// empty out queue
				while(answerQueue.size() > 0)
				{
					String chatMessage = (String) answerQueue.remove();

					// add the message to the list and print timestamp
					handleFifoCode(speakerName, chatMessage, "ANSWER", false);
				}						
			}
		}
	}
	
	boolean handleFifoCode(String speakerName, String msg, String type, boolean isQuestion) throws InterruptedException
	{
		Integer current_value = Integer.parseInt(msg.substring(10).replaceAll("[\\D]", ""));
		Integer current_user = Integer.parseInt(msg.substring(0, 10).replaceAll("[\\D]", ""));
		if(!valuesAdded.containsKey(current_user))
		{
			ArrayList vals = new ArrayList();
			valuesAdded.put(current_user, vals);
		}
		if(!fifoValues.containsKey(current_user))
		{
			ArrayList vals = new ArrayList();
			ArrayList msgVals = new ArrayList();
			fifoValues.put(current_user, vals);
			fifoMessageValues.put(current_user, msgVals);
		}
		ArrayList currentAdded = (ArrayList)valuesAdded.get(current_user);
		ArrayList currentFifo = (ArrayList)fifoValues.get(current_user);
		ArrayList currentFifoMessages = (ArrayList)fifoMessageValues.get(current_user);
		boolean isAdded = false;
		if((currentAdded.size() == 0 && current_value == 1) || (currentAdded.size() > 0 && ((Integer)currentAdded.get(currentAdded.size() - 1) == current_value - 1)))
		{
			currentAdded.add(current_value);
			messages.add(msg);
			Thread.sleep(200);
			
			// next mark the timestamp
			Date date_four = new Date();
			Timestamp current_four = new Timestamp(date_four.getTime());
			if(isQuestion)
				questionTimeStamp.put(msg, current_four);
			standardOutput<-println("[Speaker Remote] " + speakerName + ": " + type +": "+ msg + "; Timestamp: " + current_four);
			int i = -1;
			for(i = 0; i < currentFifo.size(); i++)
			{
				if((Integer)currentFifo.get(i) == current_value + 1)
				{
					current_value = (Integer)currentFifo.get(i);
					String current_message = (String)currentFifoMessages.get(i);
					currentAdded.add(current_value);
					messages.add(current_message);
					Thread.sleep(200);
					Date date_five = new Date();
					Timestamp current_five = new Timestamp(date_five.getTime());
					if(isQuestion)
						questionTimeStamp.put(current_message, current_five);
					standardOutput<-println("[Speaker Remote] " + speakerName + ": " + type +": "+ current_message + "; Timestamp: " + current_five);
				}
				else
					break;
			}
			while(i > 0)
			{
				currentFifoMessages.remove(0);
				currentFifo.remove(0);
				i--;
			}
			isAdded = true;
		}
		else
		{
			if(currentFifo.size() == 0)
			{
				currentFifo.add(current_value);
				currentFifoMessages.add(msg);
			}
			else
			{
				if(current_value < (Integer)currentFifo.get(0))
				{
					currentFifo.add(0, current_value);
					currentFifoMessages.add(0, msg);
				}
				else
				{
					int i = -1;
					boolean added = false;
					for(i = 0; i < currentFifo.size(); i++)
					{
						if(current_value < (Integer)currentFifo.get(i))
						{
							added = true;
							currentFifo.add(i, current_value);
							currentFifoMessages.add(i, msg);
							break;
						}
					}
					if(!added)
					{
						currentFifo.add(i, current_value);
						currentFifoMessages.add(i, msg);
					}
				}
			}
		}
		valuesAdded.put(current_user, currentAdded);
		fifoValues.put(current_user, currentFifo);
		fifoMessageValues.put(current_user, currentFifoMessages);
		return isAdded;
	}
	
	boolean handleFifoCodeAdvanced(String speakerName, String msg, String type, boolean isQuestion) throws InterruptedException
	{
		Integer current_value = Integer.parseInt(msg.substring(10).replaceAll("[\\D]", ""));
		Integer current_user = Integer.parseInt(msg.substring(0, 10).replaceAll("[\\D]", ""));
		if(!valuesAdded.containsKey(current_user))
		{
			ArrayList vals = new ArrayList();
			valuesAdded.put(current_user, vals);
		}
		if(!fifoValues.containsKey(current_user))
		{
			ArrayList vals = new ArrayList();
			ArrayList msgVals = new ArrayList();
			fifoValues.put(current_user, vals);
			fifoMessageValues.put(current_user, msgVals);
		}
		ArrayList currentAdded = (ArrayList)valuesAdded.get(current_user);
		ArrayList currentFifo = (ArrayList)fifoValues.get(current_user);
		ArrayList currentFifoMessages = (ArrayList)fifoMessageValues.get(current_user);
		boolean isAdded = false;
		if((currentAdded.size() == 0 && current_value == 1) || (currentAdded.size() > 0 && ((Integer)currentAdded.get(currentAdded.size() - 1) == current_value - 1)))
		{
			currentAdded.add(current_value);
			messageQueue.add(msg);
			if(isQuestion)
				questionTimeStamp.put(msg, null);

			int i = -1;
			for(i = 0; i < currentFifo.size(); i++)
			{
				if((Integer)currentFifo.get(i) == current_value + 1)
				{
					current_value = (Integer)currentFifo.get(i);
					String current_message = (String)currentFifoMessages.get(i);
					currentAdded.add(current_value);
					if(isQuestion)
						questionTimeStamp.put(current_message, null);
					messageQueue.add(current_message);
				}
				else
					break;
			}
			while(i > 0)
			{
				currentFifoMessages.remove(0);
				currentFifo.remove(0);
				i--;
			}
			isAdded = true;
		}
		else
		{
			if(currentFifo.size() == 0)
			{
				currentFifo.add(current_value);
				currentFifoMessages.add(msg);
			}
			else
			{
				if(current_value < (Integer)currentFifo.get(0))
				{
					currentFifo.add(0, current_value);
					currentFifoMessages.add(0, msg);
				}
				else
				{
					int i = -1;
					boolean added = false;
					for(i = 0; i < currentFifo.size(); i++)
					{
						if(current_value < (Integer)currentFifo.get(i))
						{
							added = true;
							currentFifo.add(i, current_value);
							currentFifoMessages.add(i, msg);
							break;
						}
					}
					if(!added)
					{
						currentFifo.add(i, current_value);
						currentFifoMessages.add(i, msg);
					}
				}
			}
		}
		valuesAdded.put(current_user, currentAdded);
		fifoValues.put(current_user, currentFifo);
		fifoMessageValues.put(current_user, currentFifoMessages);
		return isAdded;
	}
	
	void handleAdvancedStall(String speakerName, int number_of_questions, int total_messages)
	{
		double number_users = (total_messages + number_of_questions) / number_of_questions;
		double total_questions = number_users * 0.2 * number_of_questions;
		if(questionTimeStamp.values().size() == total_questions || (isQuestion && questionTimeStamp.values().size() == (int)(total_questions - number_of_questions)))
		{
			if(answerQueue.size() > 0)
			{
				// empty out queue
				while(answerQueue.size() > 0)
				{
					String chatMessage = (String) answerQueue.remove();

					// add the message to the list and print timestamp
					handleFifoCodeAdvanced(speakerName, chatMessage, "ANSWER", false);
				}						
			}
		}
	}

	// this function handles messages by their type and takes into account levels after causal consistency
	void broadcastReceiveAdvanced(String speakerName, String msg, String type, int number_of_questions, int total_messages, boolean fifo) throws InterruptedException
	{
		switch (type)
		{
			case "QUESTION":
				handleFifoCodeAdvanced(speakerName, msg, type, true) @
				handleAdvancedStall(speakerName, number_of_questions, total_messages) @
				printQueueInfo(total_messages);
				break;
			case "ANSWER":
				// check if there has been a question already placed
				handleAnswerCase(speakerName, msg, number_of_questions, total_messages) @
				printQueueInfo(total_messages);
				break;
			default:
				// add the statement to the overall message queue
				handleFifoCodeAdvanced(speakerName, msg, type, false) @
				printQueueInfo(total_messages);
				break;
		}
	}

	void handleAnswerCase(String speakerName, String msg, int number_of_questions, int total_messages) throws InterruptedException
	{
		double number_users = (total_messages + number_of_questions) / number_of_questions;
		double total_questions = number_users * 0.2 * number_of_questions;
		if(questionTimeStamp.values().size() == total_questions || (isQuestion && questionTimeStamp.values().size() == (int)(total_questions - number_of_questions)))
		{
			if(answerQueue.size() > 0)
			{
				// empty out queue
				while(answerQueue.size() > 0)
				{
					String chatMessage = (String) answerQueue.remove();
					handleFifoCodeAdvanced(speakerName, chatMessage, "ANSWER", false);
				}						
			}
			handleFifoCodeAdvanced(speakerName, msg, "ANSWER", false);
		}
		else
		{
			// store the message for later processing
			answerQueue.add(msg);
		}
	}

	void printQueueInfo(int total_messages) throws InterruptedException
	{
		// checks if all of the messages have arrived
		if(messageQueue.size() == total_messages)
		{
			while(messageQueue.size() > 0)
			{
				messages.add(messageQueue.remove());
				Thread.sleep(200);
			}
			Date date = new Date();
			Timestamp current = new Timestamp(date.getTime());
			standardOutput<-println("Overall Timestamp: " + current);
			for(int i = 0; i < messages.size(); i++)
			{
				standardOutput<-println(messages.get(i));
			}
		}
	}

	// print function to indicate a user is starting
	void whereAmI() 
	{
		standardOutput<-println("Speaker started with uan: "+ getUAN().toString());
	}	

	// sample starting function - does not serve much use
	void act(String args[])
	{
		if(args.length != 2)
		{
			standardOutput<-println("Usage: java -Duan=uan://hostname/place examples.chat.Speaker <serverName> <myName>");
			return;
		}
		
		myName=args[1];
		whereAmI();

		server_ref = (Server) Server.getReferenceByName(args[0]);
		server_ref<-registerUser(myName);
	}	
}