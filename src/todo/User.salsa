module todo;

import java.util.Set;
import java.util.HashSet;

behavior User implements ActorService{
	private String myName="";
	private String emailId="";
	private String status="";
	Server server_ref;
	
	// these are the tasks the user owns
	private Set taskIds=new HashSet();
	
	// tasks that the user is viewing - newly added
	private Set tasksViewed = new HashSet();
	
	User(String id, String email, String status)
	{
		myName = id;
		emailId = email;
		status = status;
	}

	// make a distinction between tasks the user owns vs the tasks the user is viewing
	// need to maintain a structure to know what tasks the user can actually update
	// add one more list for tasks the user is viewing
	// check to see if the user owns the task which is being updated
	// broadcastReceive needs to be fixed (only change the view of the tasklist based on the updated conditions)
	void broadcastReceive(String taskId, String msg) {
		standardOutput<-println("[Task Id] " + taskId + ": " + msg);
		tasksViewed.add(taskId);
		if (!taskIds.contains(taskId)){
		    taskIds.add(taskId);
		    }
		else
		{
			// update case
			taskIds.remove(taskId);
			taskIds.add(taskId);
		}
	}

	// add a function here for viewing task list
	void viewTaskList()
	{
		// the tasklist has to add the user to the list of vierwers
	}
	
	String getUserName() {
		return myName;
	}

    void whereAmI() {
		standardOutput<-println("User started with uan: "+ getUAN().toString());
	}
	boolean addTaskToList(TaskList taskList,String taskId,String text){
		// first view tasklist here
		
	    server_ref<-addTaskToList(taskList, taskId, text,self);
	    return true;
	}

	boolean updateTask(String taskId,String text){
		server_ref<-updateTask( taskId, text,self);
		return true;
	}


	void act(String args[]){
		if(args.length != 2){
			standardOutput<-println("Usage: java -Duan=uan://hostname/place todo.User <serverName> <myName>");
			return;
		}
		
		myName=args[1];
		whereAmI();

		server_ref = (Server) Server.getReferenceByName(args[0]);
		server_ref<-registerUser(myName, emailId, status, self);
	}	
}
