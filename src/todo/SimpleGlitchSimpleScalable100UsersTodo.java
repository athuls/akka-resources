package todo;

// Import declarations generated by the SALSA compiler, do not modify.
import java.io.IOException;
import java.util.Vector;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.InvocationTargetException;

import salsa.language.Actor;
import salsa.language.ActorReference;
import salsa.language.Message;
import salsa.language.RunTime;
import salsa.language.ServiceFactory;
import gc.WeakReference;
import salsa.language.Token;
import salsa.language.exceptions.*;
import salsa.language.exceptions.CurrentContinuationException;

import salsa.language.UniversalActor;

import salsa.naming.UAN;
import salsa.naming.UAL;
import salsa.naming.MalformedUALException;
import salsa.naming.MalformedUANException;

import salsa.resources.SystemService;

import salsa.resources.ActorService;

// End SALSA compiler generated import delcarations.

import java.time.Duration;
import java.time.Instant;
import java.util.Date;
import java.sql.Timestamp;
import java.util.*;
import java.io.PrintWriter;
import java.io.File;
import java.io.PrintWriter;
import java.io.File;

public class SimpleGlitchSimpleScalable100UsersTodo extends UniversalActor  implements ActorService {
	public static void main(String args[]) {
		UAN uan = null;
		UAL ual = null;
		if (System.getProperty("uan") != null) {
			uan = new UAN( System.getProperty("uan") );
			ServiceFactory.getTheater();
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("ual") != null) {
			ual = new UAL( System.getProperty("ual") );

			if (uan == null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an actor to have a ual at runtime without a uan.");
				System.err.println("	To give an actor a specific ual at runtime, use the identifier system property.");
				System.exit(0);
			}
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("identifier") != null) {
			if (ual != null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an identifier and a ual with system properties when creating an actor.");
				System.exit(0);
			}
			ual = new UAL( ServiceFactory.getTheater().getLocation() + System.getProperty("identifier"));
		}
		SimpleGlitchSimpleScalable100UsersTodo instance = (SimpleGlitchSimpleScalable100UsersTodo)new SimpleGlitchSimpleScalable100UsersTodo(uan, ual,null).construct();
		{
			Object[] _arguments = { args };
			instance.send( new Message(instance, instance, "act", _arguments, null, null) );
		}
	}

	public static ActorReference getReferenceByName(UAN uan)	{ return new SimpleGlitchSimpleScalable100UsersTodo(false, uan); }
	public static ActorReference getReferenceByName(String uan)	{ return SimpleGlitchSimpleScalable100UsersTodo.getReferenceByName(new UAN(uan)); }
	public static ActorReference getReferenceByLocation(UAL ual)	{ return new SimpleGlitchSimpleScalable100UsersTodo(false, ual); }

	public static ActorReference getReferenceByLocation(String ual)	{ return SimpleGlitchSimpleScalable100UsersTodo.getReferenceByLocation(new UAL(ual)); }
	public SimpleGlitchSimpleScalable100UsersTodo(boolean o, UAN __uan)	{ super(false,__uan); }
	public SimpleGlitchSimpleScalable100UsersTodo(boolean o, UAL __ual)	{ super(false,__ual); }

	public SimpleGlitchSimpleScalable100UsersTodo(UAN __uan,UniversalActor.State sourceActor)	{ this(__uan, null,null); }
	public SimpleGlitchSimpleScalable100UsersTodo(UAL __ual,UniversalActor.State sourceActor)	{ this(null, __ual,null); }
	public SimpleGlitchSimpleScalable100UsersTodo(UniversalActor.State sourceActor)		{ this(null, null,null);  }
	public SimpleGlitchSimpleScalable100UsersTodo()		{  }
	public SimpleGlitchSimpleScalable100UsersTodo(UAN __uan, UAL __ual,Object sourceActor) {
		if (__ual != null && !__ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {
			createRemotely(__uan, __ual, "todo.SimpleGlitchSimpleScalable100UsersTodo");
		} else {
			State state = new State(__uan, __ual);
			state.updateSelf(this);
			ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(), state);
			if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
		}
	}

	public UniversalActor construct() {
		Object[] __arguments = { };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public class State extends UniversalActor .State implements salsa.resources.ActorServiceState {
		public SimpleGlitchSimpleScalable100UsersTodo self;
		public void updateSelf(ActorReference actorReference) {
			((SimpleGlitchSimpleScalable100UsersTodo)actorReference).setUAL(getUAL());
			((SimpleGlitchSimpleScalable100UsersTodo)actorReference).setUAN(getUAN());
			self = new SimpleGlitchSimpleScalable100UsersTodo(false,getUAL());
			self.setUAN(getUAN());
			self.setUAL(getUAL());
			self.muteGC();
		}

		public State() {
			this(null, null);
		}

		public State(UAN __uan, UAL __ual) {
			super(__uan, __ual);
			addClassName( "todo.SimpleGlitchSimpleScalable100UsersTodo$State" );
			addMethodsForClasses();
		}

		public void construct() {}

		public void process(Message message) {
			Method[] matches = getMatches(message.getMethodName());
			Object returnValue = null;
			Exception exception = null;

			if (matches != null) {
				if (!message.getMethodName().equals("die")) {activateArgsGC(message);}
				for (int i = 0; i < matches.length; i++) {
					try {
						if (matches[i].getParameterTypes().length != message.getArguments().length) continue;
						returnValue = matches[i].invoke(this, message.getArguments());
					} catch (Exception e) {
						if (e.getCause() instanceof CurrentContinuationException) {
							sendGeneratedMessages();
							return;
						} else if (e instanceof InvocationTargetException) {
							sendGeneratedMessages();
							exception = (Exception)e.getCause();
							break;
						} else {
							continue;
						}
					}
					sendGeneratedMessages();
					currentMessage.resolveContinuations(returnValue);
					return;
				}
			}

			System.err.println("Message processing exception:");
			if (message.getSource() != null) {
				System.err.println("\tSent by: " + message.getSource().toString());
			} else System.err.println("\tSent by: unknown");
			System.err.println("\tReceived by actor: " + toString());
			System.err.println("\tMessage: " + message.toString());
			if (exception == null) {
				if (matches == null) {
					System.err.println("\tNo methods with the same name found.");
					return;
				}
				System.err.println("\tDid not match any of the following: ");
				for (int i = 0; i < matches.length; i++) {
					System.err.print("\t\tMethod: " + matches[i].getName() + "( ");
					Class[] parTypes = matches[i].getParameterTypes();
					for (int j = 0; j < parTypes.length; j++) {
						System.err.print(parTypes[j].getName() + " ");
					}
					System.err.println(")");
				}
			} else {
				System.err.println("\tThrew exception: " + exception);
				exception.printStackTrace();
			}
		}

		public void todoSession(ArrayList users, ArrayList userNames, int num_users, int num_messages, String server_ref, String logDirectory, TaskList taskList) {
			Server server = (Server)Server.getReferenceByName(server_ref);
			ArrayList values = new ArrayList();
			for (int i = 1; i<=num_messages; i++)values.add(i);
			Collections.shuffle(values);
			for (int i = 0; i<20; i++){
				User registeredUser = (User)users.get(i);
				{
					// registeredUser<-setIsLeader()
					{
						Object _arguments[] = {  };
						Message message = new Message( self, registeredUser, "setIsLeader", _arguments, null, null );
						__messages.add( message );
					}
				}
			}
			for (int i = 0; i<20; i++){
				User registeredUser = (User)users.get(i);
				ArrayList taskNames = new ArrayList();
				for (int j = 1; j<=num_messages; j++){
					int index = ((i)>(num_messages-1)?(num_messages-1):(i));
					String taskname = "u"+i+"t"+j;
					taskNames.add(taskname);
					String taskMessage = " ";
					boolean isFollowUp = false;
					int userIndex = i+1;
					taskMessage = "User"+userIndex+": Initial Poll "+values.get(j-1)+".";
					{
						// registeredUser<-addTaskToList(taskList, taskMessage, (String)userNames.get(i), taskname, isFollowUp, num_messages, (num_users-1)*num_messages, true)
						{
							Object _arguments[] = { taskList, taskMessage, (String)userNames.get(i), taskname, isFollowUp, num_messages, (num_users-1)*num_messages, true };
							Message message = new Message( self, registeredUser, "addTaskToList", _arguments, null, null );
							__messages.add( message );
						}
					}
				}
				Collections.shuffle(values);
			}
			for (int i = 20; i<users.size(); i++){
				User registeredUser = (User)users.get(i);
				for (int j = 1; j<=num_messages; j++){
					int index = ((i)>(num_messages-1)?(num_messages-1):(i));
					String taskname = "u"+i+"t"+j;
					String taskMessage = " ";
					boolean isFollowUp = true;
					taskMessage = "User"+(i+1)+": Follow Up Poll "+values.get(j-1)+".";
					{
						// registeredUser<-addTaskToList(taskList, taskMessage, (String)userNames.get(i), taskname, isFollowUp, num_messages, (num_users-1)*num_messages, true)
						{
							Object _arguments[] = { taskList, taskMessage, (String)userNames.get(i), taskname, isFollowUp, num_messages, (num_users-1)*num_messages, true };
							Message message = new Message( self, registeredUser, "addTaskToList", _arguments, null, null );
							__messages.add( message );
						}
					}
				}
				Collections.shuffle(values);
			}
		}
		public void reply(String replyMsg) {
			{
				// standardOutput<-println(replyMsg)
				{
					Object _arguments[] = { replyMsg };
					Message message = new Message( self, standardOutput, "println", _arguments, null, null );
					__messages.add( message );
				}
			}
		}
		public void act(String args[]) {
			try {
				String serverRef = args[0];
				String logDirectory = args[1];
				int num_users = Integer.parseInt(args[2]);
				int num_messages = Integer.parseInt(args[3]);
				TaskList taskList = (TaskList)TaskList.getReferenceByName(args[4]);
				String userPaddedString = args[5];
				String nameServerHost = args[6];
				Server server = (Server)Server.getReferenceByName(serverRef);
				ArrayList users = new ArrayList();
				ArrayList userNames = new ArrayList();
				Date first = new Date();
				Timestamp start = new Timestamp(first.getTime());
				String fileSeparator = System.getProperty("file.separator");
				for (int i = 1; i<=num_users; i++){
					int usrId = 10+i;
					String id = "uan://"+nameServerHost+":3030/id"+usrId;
					String userName = "user"+i;
					userNames.add(userName);
					User user = (User)User.getReferenceByName(id);
					users.add(user);
				}
				{
					// standardOutput<-println("Starting time: "+start)
					{
						Object _arguments[] = { "Starting time: "+start };
						Message message = new Message( self, standardOutput, "println", _arguments, null, null );
						__messages.add( message );
					}
				}
				Instant begin = Instant.now();
				{
					Token token_3_0 = new Token();
					Token token_3_1 = new Token();
					// todoSession(users, userNames, num_users, num_messages, serverRef, logDirectory, taskList)
					{
						Object _arguments[] = { users, userNames, num_users, num_messages, serverRef, logDirectory, taskList };
						Message message = new Message( self, self, "todoSession", _arguments, null, token_3_0 );
						__messages.add( message );
					}
					// trackEndingTime(begin)
					{
						Object _arguments[] = { begin };
						Message message = new Message( self, self, "trackEndingTime", _arguments, token_3_0, token_3_1 );
						__messages.add( message );
					}
					// standardOutput<-println("Done with chat conversation")
					{
						Object _arguments[] = { "Done with chat conversation" };
						Message message = new Message( self, standardOutput, "println", _arguments, token_3_1, null );
						__messages.add( message );
					}
				}
			}
			catch (Exception e) {
				{
					// standardOutput<-println("Usage: java examples.chat.Chat <friendUAN1> <friendUAN2> <friendUAN3>")
					{
						Object _arguments[] = { "Usage: java examples.chat.Chat <friendUAN1> <friendUAN2> <friendUAN3>" };
						Message message = new Message( self, standardOutput, "println", _arguments, null, null );
						__messages.add( message );
					}
				}
				return;
			}

		}
		public void trackEndingTime(Instant begin) {
			Date second = new Date();
			Timestamp end = new Timestamp(second.getTime());
			Instant endTime = Instant.now();
			Duration timeDifference = Duration.between(begin, endTime);
			long timeTaken = timeDifference.toMillis();
			{
				// standardOutput<-println("Time taken to run this in milliseconds: "+timeTaken)
				{
					Object _arguments[] = { "Time taken to run this in milliseconds: "+timeTaken };
					Message message = new Message( self, standardOutput, "println", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				// standardOutput<-println("Ending time: "+end)
				{
					Object _arguments[] = { "Ending time: "+end };
					Message message = new Message( self, standardOutput, "println", _arguments, null, null );
					__messages.add( message );
				}
			}
		}
	}
}