package examples.chat;

// Import declarations generated by the SALSA compiler, do not modify.
import java.io.IOException;
import java.util.Vector;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.InvocationTargetException;

import salsa.language.Actor;
import salsa.language.ActorReference;
import salsa.language.Message;
import salsa.language.RunTime;
import salsa.language.ServiceFactory;
import gc.WeakReference;
import salsa.language.Token;
import salsa.language.exceptions.*;
import salsa.language.exceptions.CurrentContinuationException;

import salsa.language.UniversalActor;

import salsa.naming.UAN;
import salsa.naming.UAL;
import salsa.naming.MalformedUALException;
import salsa.naming.MalformedUANException;

import salsa.resources.SystemService;

import salsa.resources.ActorService;

// End SALSA compiler generated import delcarations.

import java.time.Duration;
import java.time.Instant;
import java.util.Date;
import java.sql.Timestamp;
import java.util.*;

public class NoConsistency50Users extends UniversalActor  {
	public static void main(String args[]) {
		UAN uan = null;
		UAL ual = null;
		if (System.getProperty("uan") != null) {
			uan = new UAN( System.getProperty("uan") );
			ServiceFactory.getTheater();
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("ual") != null) {
			ual = new UAL( System.getProperty("ual") );

			if (uan == null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an actor to have a ual at runtime without a uan.");
				System.err.println("	To give an actor a specific ual at runtime, use the identifier system property.");
				System.exit(0);
			}
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("identifier") != null) {
			if (ual != null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an identifier and a ual with system properties when creating an actor.");
				System.exit(0);
			}
			ual = new UAL( ServiceFactory.getTheater().getLocation() + System.getProperty("identifier"));
		}
		RunTime.receivedMessage();
		NoConsistency50Users instance = (NoConsistency50Users)new NoConsistency50Users(uan, ual,null).construct();
		gc.WeakReference instanceRef=new gc.WeakReference(uan,ual);
		{
			Object[] _arguments = { args };

			//preAct() for local actor creation
			//act() for remote actor creation
			if (ual != null && !ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {instance.send( new Message(instanceRef, instanceRef, "act", _arguments, false) );}
			else {instance.send( new Message(instanceRef, instanceRef, "preAct", _arguments, false) );}
		}
		RunTime.finishedProcessingMessage();
	}

	public static ActorReference getReferenceByName(UAN uan)	{ return new NoConsistency50Users(false, uan); }
	public static ActorReference getReferenceByName(String uan)	{ return NoConsistency50Users.getReferenceByName(new UAN(uan)); }
	public static ActorReference getReferenceByLocation(UAL ual)	{ return new NoConsistency50Users(false, ual); }

	public static ActorReference getReferenceByLocation(String ual)	{ return NoConsistency50Users.getReferenceByLocation(new UAL(ual)); }
	public NoConsistency50Users(boolean o, UAN __uan)	{ super(false,__uan); }
	public NoConsistency50Users(boolean o, UAL __ual)	{ super(false,__ual); }
	public NoConsistency50Users(UAN __uan,UniversalActor.State sourceActor)	{ this(__uan, null, sourceActor); }
	public NoConsistency50Users(UAL __ual,UniversalActor.State sourceActor)	{ this(null, __ual, sourceActor); }
	public NoConsistency50Users(UniversalActor.State sourceActor)		{ this(null, null, sourceActor);  }
	public NoConsistency50Users()		{  }
	public NoConsistency50Users(UAN __uan, UAL __ual, Object obj) {
		//decide the type of sourceActor
		//if obj is null, the actor must be the startup actor.
		//if obj is an actorReference, this actor is created by a remote actor

		if (obj instanceof UniversalActor.State || obj==null) {
			  UniversalActor.State sourceActor;
			  if (obj!=null) { sourceActor=(UniversalActor.State) obj;}
			  else {sourceActor=null;}

			  //remote creation message sent to a remote system service.
			  if (__ual != null && !__ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {
			    WeakReference sourceRef;
			    if (sourceActor!=null && sourceActor.getUAL() != null) {sourceRef = new WeakReference(sourceActor.getUAN(),sourceActor.getUAL());}
			    else {sourceRef = null;}
			    if (sourceActor != null) {
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual!=null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());
			      activateGC();
			    }
			    createRemotely(__uan, __ual, "examples.chat.NoConsistency50Users", sourceRef);
			  }

			  // local creation
			  else {
			    State state = new State(__uan, __ual);

			    //assume the reference is weak
			    muteGC();

			    //the source actor is  the startup actor
			    if (sourceActor == null) {
			      state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			    }

			    //the souce actor is a normal actor
			    else if (sourceActor instanceof UniversalActor.State) {

			      // this reference is part of garbage collection
			      activateGC();

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());

			      /* Garbage collection registration:
			       * register 'this reference' in sourceActor's forward list @
			       * register 'this reference' in the forward acquaintance's inverse list
			       */
			      String inverseRefString=null;
			      if (sourceActor.getUAN()!=null) {inverseRefString=sourceActor.getUAN().toString();}
			      else if (sourceActor.getUAL()!=null) {inverseRefString=sourceActor.getUAL().toString();}
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual != null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}
			      else {sourceActor.getActorMemory().getForwardList().putReference(state.getUAL());}

			      //put the inverse reference information in the actormemory
			      if (inverseRefString!=null) state.getActorMemory().getInverseList().putInverseReference(inverseRefString);
			    }
			    state.updateSelf(this);
			    ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(), state);
			    if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
			  }
		}

		//creation invoked by a remote message
		else if (obj instanceof ActorReference) {
			  ActorReference sourceRef= (ActorReference) obj;
			  State state = new State(__uan, __ual);
			  muteGC();
			  state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			  if (sourceRef.getUAN() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAN());}
			  else if (sourceRef.getUAL() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAL());}
			  state.updateSelf(this);
			  ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(),state);
			  if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
		}
	}

	public UniversalActor construct() {
		Object[] __arguments = { };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public class State extends UniversalActor .State {
		public NoConsistency50Users self;
		public void updateSelf(ActorReference actorReference) {
			((NoConsistency50Users)actorReference).setUAL(getUAL());
			((NoConsistency50Users)actorReference).setUAN(getUAN());
			self = new NoConsistency50Users(false,getUAL());
			self.setUAN(getUAN());
			self.setUAL(getUAL());
			self.activateGC();
		}

		public void preAct(String[] arguments) {
			getActorMemory().getInverseList().removeInverseReference("rmsp://me",1);
			{
				Object[] __args={arguments};
				self.send( new Message(self,self, "act", __args, null,null,false) );
			}
		}

		public State() {
			this(null, null);
		}

		public State(UAN __uan, UAL __ual) {
			super(__uan, __ual);
			addClassName( "examples.chat.NoConsistency50Users$State" );
			addMethodsForClasses();
		}

		public void construct() {}

		public void process(Message message) {
			Method[] matches = getMatches(message.getMethodName());
			Object returnValue = null;
			Exception exception = null;

			if (matches != null) {
				if (!message.getMethodName().equals("die")) {activateArgsGC(message);}
				for (int i = 0; i < matches.length; i++) {
					try {
						if (matches[i].getParameterTypes().length != message.getArguments().length) continue;
						returnValue = matches[i].invoke(this, message.getArguments());
					} catch (Exception e) {
						if (e.getCause() instanceof CurrentContinuationException) {
							sendGeneratedMessages();
							return;
						} else if (e instanceof InvocationTargetException) {
							sendGeneratedMessages();
							exception = (Exception)e.getCause();
							break;
						} else {
							continue;
						}
					}
					sendGeneratedMessages();
					currentMessage.resolveContinuations(returnValue);
					return;
				}
			}

			System.err.println("Message processing exception:");
			if (message.getSource() != null) {
				System.err.println("\tSent by: " + message.getSource().toString());
			} else System.err.println("\tSent by: unknown");
			System.err.println("\tReceived by actor: " + toString());
			System.err.println("\tMessage: " + message.toString());
			if (exception == null) {
				if (matches == null) {
					System.err.println("\tNo methods with the same name found.");
					return;
				}
				System.err.println("\tDid not match any of the following: ");
				for (int i = 0; i < matches.length; i++) {
					System.err.print("\t\tMethod: " + matches[i].getName() + "( ");
					Class[] parTypes = matches[i].getParameterTypes();
					for (int j = 0; j < parTypes.length; j++) {
						System.err.print(parTypes[j].getName() + " ");
					}
					System.err.println(")");
				}
			} else {
				System.err.println("\tThrew exception: " + exception);
				exception.printStackTrace();
			}
		}

		public void chatSession(Speaker s1, Speaker s2, Speaker s3, Speaker s4, Speaker s5, Speaker s6, Speaker s7, Speaker s8, Speaker s9, Speaker s10, Speaker s11, Speaker s12, Speaker s13, Speaker s14, Speaker s15, Speaker s16, Speaker s17, Speaker s18, Speaker s19, Speaker s20, Speaker s21, Speaker s22, Speaker s23, Speaker s24, Speaker s25, Speaker s26, Speaker s27, Speaker s28, Speaker s29, Speaker s30, Speaker s31, Speaker s32, Speaker s33, Speaker s34, Speaker s35, Speaker s36, Speaker s37, Speaker s38, Speaker s39, Speaker s40, Speaker s41, Speaker s42, Speaker s43, Speaker s44, Speaker s45, Speaker s46, Speaker s47, Speaker s48, Speaker s49, Speaker s50, int num_messages) {
			ArrayList values = new ArrayList();
			for (int i = 1; i<=num_messages; i++)values.add(i);
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s1<-broadcastSend("User 1: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 1: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s1, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s2<-broadcastSend("User 2: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 2: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s2, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s3<-broadcastSend("User 3: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 3: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s3, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s4<-broadcastSend("User 4: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 4: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s4, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s5<-broadcastSend("User 5: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 5: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s5, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s6<-broadcastSend("User 6: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 6: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s6, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s7<-broadcastSend("User 7: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 7: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s7, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s8<-broadcastSend("User 8: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 8: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s8, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s9<-broadcastSend("User 9: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 9: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s9, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s10<-broadcastSend("User 10: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 10: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s10, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s11<-broadcastSend("User 11: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 11: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s11, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s12<-broadcastSend("User 12: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 12: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s12, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s13<-broadcastSend("User 13: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 13: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s13, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s14<-broadcastSend("User 14: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 14: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s14, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s15<-broadcastSend("User 15: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 15: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s15, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s16<-broadcastSend("User 16: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 16: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s16, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s17<-broadcastSend("User 17: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 17: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s17, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s18<-broadcastSend("User 18: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 18: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s18, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s19<-broadcastSend("User 19: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 19: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s19, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s20<-broadcastSend("User 20: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 20: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s20, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s21<-broadcastSend("User 21: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 21: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s21, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s22<-broadcastSend("User 22: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 22: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s22, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s23<-broadcastSend("User 23: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 23: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s23, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s24<-broadcastSend("User 24: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 24: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s24, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s25<-broadcastSend("User 25: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 25: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s25, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s26<-broadcastSend("User 26: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 26: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s26, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s27<-broadcastSend("User 27: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 27: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s27, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s28<-broadcastSend("User 28: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 28: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s28, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s29<-broadcastSend("User 29: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 29: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s29, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s30<-broadcastSend("User 30: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 30: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s30, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s31<-broadcastSend("User 31: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 31: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s31, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s32<-broadcastSend("User 32: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 32: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s32, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s33<-broadcastSend("User 33: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 33: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s33, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s34<-broadcastSend("User 34: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 34: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s34, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s35<-broadcastSend("User 35: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 35: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s35, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s36<-broadcastSend("User 36: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 36: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s36, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s37<-broadcastSend("User 37: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 37: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s37, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s38<-broadcastSend("User 38: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 38: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s38, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s39<-broadcastSend("User 39: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 39: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s39, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s40<-broadcastSend("User 40: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 40: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s40, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s41<-broadcastSend("User 41: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 41: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s41, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s42<-broadcastSend("User 42: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 42: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s42, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s43<-broadcastSend("User 43: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 43: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s43, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s44<-broadcastSend("User 44: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 44: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s44, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s45<-broadcastSend("User 45: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 45: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s45, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s46<-broadcastSend("User 46: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 46: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s46, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s47<-broadcastSend("User 47: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 47: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s47, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s48<-broadcastSend("User 48: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 48: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s48, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s49<-broadcastSend("User 49: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 49: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s49, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
			Collections.shuffle(values);
			for (int i = 1; i<=num_messages; i++)			{
				// s50<-broadcastSend("User 50: Random message "+values.get(i-1)+".", true, false, false, 0, 49*num_messages, false)
				{
					Object _arguments[] = { "User 50: Random message "+values.get(i-1)+".", true, false, false, new Integer(0), 49*num_messages, false };
					Message message = new Message( self, s50, "broadcastSend", _arguments, null, null );
					__messages.add( message );
				}
			}
		}
		public void reply(String replyMsg) {
			{
				// standardOutput<-println(replyMsg)
				{
					Object _arguments[] = { replyMsg };
					Message message = new Message( self, standardOutput, "println", _arguments, null, null );
					__messages.add( message );
				}
			}
		}
		public void act(String args[]) {
			try {
				Speaker speaker1 = (Speaker)Speaker.getReferenceByName(args[0]);
				Speaker speaker2 = (Speaker)Speaker.getReferenceByName(args[1]);
				Speaker speaker3 = (Speaker)Speaker.getReferenceByName(args[2]);
				Speaker speaker4 = (Speaker)Speaker.getReferenceByName(args[3]);
				Speaker speaker5 = (Speaker)Speaker.getReferenceByName(args[4]);
				Speaker speaker6 = (Speaker)Speaker.getReferenceByName(args[5]);
				Speaker speaker7 = (Speaker)Speaker.getReferenceByName(args[6]);
				Speaker speaker8 = (Speaker)Speaker.getReferenceByName(args[7]);
				Speaker speaker9 = (Speaker)Speaker.getReferenceByName(args[8]);
				Speaker speaker10 = (Speaker)Speaker.getReferenceByName(args[9]);
				Speaker speaker11 = (Speaker)Speaker.getReferenceByName(args[10]);
				Speaker speaker12 = (Speaker)Speaker.getReferenceByName(args[11]);
				Speaker speaker13 = (Speaker)Speaker.getReferenceByName(args[12]);
				Speaker speaker14 = (Speaker)Speaker.getReferenceByName(args[13]);
				Speaker speaker15 = (Speaker)Speaker.getReferenceByName(args[14]);
				Speaker speaker16 = (Speaker)Speaker.getReferenceByName(args[15]);
				Speaker speaker17 = (Speaker)Speaker.getReferenceByName(args[16]);
				Speaker speaker18 = (Speaker)Speaker.getReferenceByName(args[17]);
				Speaker speaker19 = (Speaker)Speaker.getReferenceByName(args[18]);
				Speaker speaker20 = (Speaker)Speaker.getReferenceByName(args[19]);
				Speaker speaker21 = (Speaker)Speaker.getReferenceByName(args[20]);
				Speaker speaker22 = (Speaker)Speaker.getReferenceByName(args[21]);
				Speaker speaker23 = (Speaker)Speaker.getReferenceByName(args[22]);
				Speaker speaker24 = (Speaker)Speaker.getReferenceByName(args[23]);
				Speaker speaker25 = (Speaker)Speaker.getReferenceByName(args[24]);
				Speaker speaker26 = (Speaker)Speaker.getReferenceByName(args[25]);
				Speaker speaker27 = (Speaker)Speaker.getReferenceByName(args[26]);
				Speaker speaker28 = (Speaker)Speaker.getReferenceByName(args[27]);
				Speaker speaker29 = (Speaker)Speaker.getReferenceByName(args[28]);
				Speaker speaker30 = (Speaker)Speaker.getReferenceByName(args[29]);
				Speaker speaker31 = (Speaker)Speaker.getReferenceByName(args[30]);
				Speaker speaker32 = (Speaker)Speaker.getReferenceByName(args[31]);
				Speaker speaker33 = (Speaker)Speaker.getReferenceByName(args[32]);
				Speaker speaker34 = (Speaker)Speaker.getReferenceByName(args[33]);
				Speaker speaker35 = (Speaker)Speaker.getReferenceByName(args[34]);
				Speaker speaker36 = (Speaker)Speaker.getReferenceByName(args[35]);
				Speaker speaker37 = (Speaker)Speaker.getReferenceByName(args[36]);
				Speaker speaker38 = (Speaker)Speaker.getReferenceByName(args[37]);
				Speaker speaker39 = (Speaker)Speaker.getReferenceByName(args[38]);
				Speaker speaker40 = (Speaker)Speaker.getReferenceByName(args[39]);
				Speaker speaker41 = (Speaker)Speaker.getReferenceByName(args[40]);
				Speaker speaker42 = (Speaker)Speaker.getReferenceByName(args[41]);
				Speaker speaker43 = (Speaker)Speaker.getReferenceByName(args[42]);
				Speaker speaker44 = (Speaker)Speaker.getReferenceByName(args[43]);
				Speaker speaker45 = (Speaker)Speaker.getReferenceByName(args[44]);
				Speaker speaker46 = (Speaker)Speaker.getReferenceByName(args[45]);
				Speaker speaker47 = (Speaker)Speaker.getReferenceByName(args[46]);
				Speaker speaker48 = (Speaker)Speaker.getReferenceByName(args[47]);
				Speaker speaker49 = (Speaker)Speaker.getReferenceByName(args[48]);
				Speaker speaker50 = (Speaker)Speaker.getReferenceByName(args[49]);
				int num_messages = Integer.parseInt(args[50]);
				Date first = new Date();
				Timestamp start = new Timestamp(first.getTime());
				{
					// standardOutput<-println("Starting time: "+start)
					{
						Object _arguments[] = { "Starting time: "+start };
						Message message = new Message( self, standardOutput, "println", _arguments, null, null );
						__messages.add( message );
					}
				}
				Instant begin = Instant.now();
				{
					Token token_3_0 = new Token();
					Token token_3_1 = new Token();
					// chatSession(speaker1, speaker2, speaker3, speaker4, speaker5, speaker6, speaker7, speaker8, speaker9, speaker10, speaker11, speaker12, speaker13, speaker14, speaker15, speaker16, speaker17, speaker18, speaker19, speaker20, speaker21, speaker22, speaker23, speaker24, speaker25, speaker26, speaker27, speaker28, speaker29, speaker30, speaker31, speaker32, speaker33, speaker34, speaker35, speaker36, speaker37, speaker38, speaker39, speaker40, speaker41, speaker42, speaker43, speaker44, speaker45, speaker46, speaker47, speaker48, speaker49, speaker50, num_messages)
					{
						Object _arguments[] = { speaker1, speaker2, speaker3, speaker4, speaker5, speaker6, speaker7, speaker8, speaker9, speaker10, speaker11, speaker12, speaker13, speaker14, speaker15, speaker16, speaker17, speaker18, speaker19, speaker20, speaker21, speaker22, speaker23, speaker24, speaker25, speaker26, speaker27, speaker28, speaker29, speaker30, speaker31, speaker32, speaker33, speaker34, speaker35, speaker36, speaker37, speaker38, speaker39, speaker40, speaker41, speaker42, speaker43, speaker44, speaker45, speaker46, speaker47, speaker48, speaker49, speaker50, num_messages };
						Message message = new Message( self, self, "chatSession", _arguments, null, token_3_0 );
						__messages.add( message );
					}
					// trackEndingTime(begin)
					{
						Object _arguments[] = { begin };
						Message message = new Message( self, self, "trackEndingTime", _arguments, token_3_0, token_3_1 );
						__messages.add( message );
					}
					// standardOutput<-println("Done with chat conversation")
					{
						Object _arguments[] = { "Done with chat conversation" };
						Message message = new Message( self, standardOutput, "println", _arguments, token_3_1, null );
						__messages.add( message );
					}
				}
			}
			catch (Exception e) {
				{
					// standardOutput<-println("Usage: java examples.chat.Chat <friendUAN1> <friendUAN2> <friendUAN3>")
					{
						Object _arguments[] = { "Usage: java examples.chat.Chat <friendUAN1> <friendUAN2> <friendUAN3>" };
						Message message = new Message( self, standardOutput, "println", _arguments, null, null );
						__messages.add( message );
					}
				}
				return;
			}

		}
		public void trackEndingTime(Instant begin) {
			Date second = new Date();
			Timestamp end = new Timestamp(second.getTime());
			Instant endTime = Instant.now();
			Duration timeDifference = Duration.between(begin, endTime);
			long timeTaken = timeDifference.toMillis();
			{
				// standardOutput<-println("Time taken to run this in milliseconds: "+timeTaken)
				{
					Object _arguments[] = { "Time taken to run this in milliseconds: "+timeTaken };
					Message message = new Message( self, standardOutput, "println", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				// standardOutput<-println("Ending time: "+end)
				{
					Object _arguments[] = { "Ending time: "+end };
					Message message = new Message( self, standardOutput, "println", _arguments, null, null );
					__messages.add( message );
				}
			}
		}
	}
}